{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/database/connection.ts","../../server/models/index.ts","../../server/routes/profile.ts","../../server/routes/projects.ts","../../server/routes/contacts.ts","../../server/routes/git.ts","../../server/routes/migrate.ts","../../server/routes/sms.ts","../../server/routes/settings.ts","../../server/routes/activities.ts","../../server/routes/upload.ts","../../server/routes/email-test.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import mongoose from \"mongoose\";\nimport dotenv from \"dotenv\";\n\ndotenv.config();\n\nconst MONGODB_URI =\n  process.env.MONGODB_URI || \"mongodb://localhost:27017/kanu-portfolio\";\nconst ENABLE_MONGODB = process.env.ENABLE_MONGODB !== \"false\";\n\nlet isConnected = false;\nlet connectionAttempts = 0;\nconst MAX_RECONNECT_ATTEMPTS = 5;\n\nexport const connectDB = async () => {\n  if (isConnected) {\n    console.log(\"‚úÖ MongoDB already connected\");\n    return true;\n  }\n\n  if (!ENABLE_MONGODB) {\n    console.log(\"üì± MongoDB disabled - running in localStorage mode\");\n    return false;\n  }\n\n  try {\n    console.log(`üîå Attempting to connect to MongoDB...`);\n    console.log(`üìç Connection URI: ${MONGODB_URI.replace(/\\/\\/.*@/, '//***:***@')}`);\n\n    // Use minimal, compatible options (same behavior as test script)\n    await mongoose.connect(MONGODB_URI);\n\n    isConnected = true;\n    connectionAttempts = 0;\n    console.log(\"‚úÖ MongoDB connected successfully\");\n\n    // Set up connection event handlers\n    mongoose.connection.on('error', (error) => {\n      console.error('‚ùå MongoDB connection error:', error);\n      isConnected = false;\n    });\n\n    mongoose.connection.on('disconnected', () => {\n      console.log('‚ö†Ô∏è MongoDB disconnected');\n      isConnected = false;\n    });\n\n    mongoose.connection.on('reconnected', () => {\n      console.log('üîÑ MongoDB reconnected');\n      isConnected = true;\n    });\n\n    return true;\n  } catch (error) {\n    connectionAttempts++;\n    console.error(`‚ùå MongoDB connection attempt ${connectionAttempts} failed:`, error.message);\n\n    if (connectionAttempts < MAX_RECONNECT_ATTEMPTS) {\n      console.log(`üîÑ Retrying connection in 5 seconds... (${connectionAttempts}/${MAX_RECONNECT_ATTEMPTS})`);\n      setTimeout(() => {\n        connectDB();\n      }, 5000);\n      return false;\n    } else {\n      console.warn(`‚ö†Ô∏è Max reconnection attempts reached. MongoDB connection failed.`);\n      console.warn(`üì± Falling back to localStorage mode`);\n      return false;\n    }\n  }\n};\n\nexport const disconnectDB = async () => {\n  if (!isConnected) {\n    return;\n  }\n\n  try {\n    await mongoose.disconnect();\n    isConnected = false;\n    console.log(\"‚úÖ MongoDB disconnected\");\n  } catch (error) {\n    console.error(\"‚ùå MongoDB disconnection error:\", error);\n  }\n};\n\nexport const isMongoDBAvailable = () => {\n  if (!ENABLE_MONGODB) {\n    return false;\n  }\n  return isConnected && mongoose.connection.readyState === 1;\n};\n\nexport const getConnectionStatus = () => {\n  if (!ENABLE_MONGODB) {\n    return { status: 'disabled', message: 'MongoDB is disabled' };\n  }\n\n  if (isConnected && mongoose.connection.readyState === 1) {\n    return {\n      status: 'connected',\n      message: 'MongoDB is connected and ready',\n      database: mongoose.connection.db?.databaseName || 'unknown'\n    };\n  }\n\n  return {\n    status: 'disconnected',\n    message: 'MongoDB is not connected',\n    readyState: mongoose.connection.readyState\n  };\n};\n\n// Handle process termination\nprocess.on(\"SIGINT\", disconnectDB);\nprocess.on(\"SIGTERM\", disconnectDB);\n","import mongoose from \"mongoose\";\n\n// Profile Schema with improved validation\nconst ProfileSchema = new mongoose.Schema(\n  {\n    userId: {\n      type: String,\n      required: [true, 'User ID is required'],\n      unique: true,\n      trim: true,\n      minlength: [3, 'User ID must be at least 3 characters long']\n    },\n    name: {\n      type: String,\n      default: \"\",\n      trim: true,\n      maxlength: [100, 'Name cannot exceed 100 characters']\n    },\n    bio: {\n      type: String,\n      default: \"\",\n      trim: true,\n      maxlength: [1000, 'Bio cannot exceed 1000 characters']\n    },\n    tagline: {\n      type: String,\n      default: \"\",\n      trim: true,\n      maxlength: [200, 'Tagline cannot exceed 200 characters']\n    },\n    experience: {\n      type: String,\n      default: \"\",\n      trim: true,\n      maxlength: [100, 'Experience cannot exceed 100 characters']\n    },\n    availability: {\n      type: String,\n      default: \"\",\n      trim: true,\n      maxlength: [200, 'Availability cannot exceed 200 characters']\n    },\n    profileImage: {\n      type: String,\n      default: \"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=400&h=400&fit=crop&crop=face\",\n      validate: {\n        validator: function (v: string) {\n          return v === \"\" || /^https?:\\/\\/.+/.test(v);\n        },\n        message: 'Profile image must be a valid URL'\n      }\n    },\n    logoText: {\n      type: String,\n      default: \"‚ö° logo\",\n      trim: true,\n      maxlength: [50, 'Logo text cannot exceed 50 characters']\n    },\n    resumeUrl: {\n      type: String,\n      default: \"\",\n      validate: {\n        validator: function (v: string) {\n          return v === \"\" || /^https?:\\/\\/.+/.test(v);\n        },\n        message: 'Resume URL must be a valid URL'\n      }\n    },\n    contactInfo: {\n      email: {\n        type: String,\n        default: \"kanuprajapati717@gmail.com\",\n        validate: {\n          validator: function (v: string) {\n            return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(v);\n          },\n          message: 'Please provide a valid email address'\n        }\n      },\n      phone: {\n        type: String,\n        default: \"+91 9876543210\",\n        trim: true\n      },\n      location: {\n        type: String,\n        default: \"Gujarat, India\",\n        trim: true,\n        maxlength: [100, 'Location cannot exceed 100 characters']\n      },\n      linkedin: {\n        type: String,\n        default: \"https://linkedin.com/in/kanuprajapati\",\n        validate: {\n          validator: function (v: string) {\n            return /^https?:\\/\\/.+/.test(v);\n          },\n          message: 'LinkedIn URL must be a valid URL'\n        }\n      },\n      github: {\n        type: String,\n        default: \"https://github.com/kanuprajapati\",\n        validate: {\n          validator: function (v: string) {\n            return /^https?:\\/\\/.+/.test(v);\n          },\n          message: 'GitHub URL must be a valid URL'\n        }\n      },\n      website: {\n        type: String,\n        default: \"\",\n        validate: {\n          validator: function (v: string) {\n            return v === \"\" || /^https?:\\/\\/.+/.test(v);\n          },\n          message: 'Website URL must be a valid URL'\n        }\n      },\n      twitter: {\n        type: String,\n        default: \"\",\n        validate: {\n          validator: function (v: string) {\n            return v === \"\" || /^https?:\\/\\/.+/.test(v);\n          },\n          message: 'Twitter URL must be a valid URL'\n        }\n      },\n    },\n    // Simple skills array for profile overview (separate Skill model exists for detailed skills)\n    skills: [{\n      type: String,\n      trim: true,\n      maxlength: [50, 'Each skill cannot exceed 50 characters']\n    }],\n  },\n  {\n    timestamps: true,\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true }\n  },\n);\n\n// Project Schema with improved validation\nconst ProjectSchema = new mongoose.Schema(\n  {\n    userId: {\n      type: String,\n      required: [true, 'User ID is required'],\n      trim: true\n    },\n    title: {\n      type: String,\n      required: [true, 'Project title is required'],\n      trim: true,\n      maxlength: [100, 'Project title cannot exceed 100 characters']\n    },\n    description: {\n      type: String,\n      required: [true, 'Project description is required'],\n      trim: true,\n      maxlength: [500, 'Project description cannot exceed 500 characters']\n    },\n    fullDescription: {\n      type: String,\n      default: \"\",\n      trim: true,\n      maxlength: [2000, 'Full description cannot exceed 2000 characters']\n    },\n    tags: [{\n      type: String,\n      trim: true,\n      maxlength: [30, 'Each tag cannot exceed 30 characters']\n    }],\n    image: {\n      type: String,\n      required: [true, 'Project image is required'],\n      validate: {\n        validator: function (v: string) {\n          return /^https?:\\/\\/.+/.test(v);\n        },\n        message: 'Project image must be a valid URL'\n      }\n    },\n    status: {\n      type: String,\n      enum: {\n        values: [\"In Development\", \"Completed\", \"Live\", \"Published\"],\n        message: 'Status must be one of: In Development, Completed, Live, Published'\n      },\n      default: \"In Development\",\n    },\n    dateCompleted: {\n      type: String,\n      default: \"\",\n      validate: {\n        validator: function (v: string) {\n          if (v === \"\") return true;\n          return /^\\d{4}-\\d{2}-\\d{2}$/.test(v);\n        },\n        message: 'Date completed must be in YYYY-MM-DD format'\n      }\n    },\n    links: {\n      github: {\n        type: String,\n        default: \"\",\n        validate: {\n          validator: function (v: string) {\n            return v === \"\" || /^https?:\\/\\/.+/.test(v);\n          },\n          message: 'GitHub link must be a valid URL'\n        }\n      },\n      demo: {\n        type: String,\n        default: \"\",\n        validate: {\n          validator: function (v: string) {\n            return v === \"\" || /^https?:\\/\\/.+/.test(v);\n          },\n          message: 'Demo link must be a valid URL'\n        }\n      },\n      live: {\n        type: String,\n        default: \"\",\n        validate: {\n          validator: function (v: string) {\n            return v === \"\" || /^https?:\\/\\/.+/.test(v);\n          },\n          message: 'Live link must be a valid URL'\n        }\n      },\n    },\n    screenshots: [{\n      type: String,\n      validate: {\n        validator: function (v: string) {\n          return /^https?:\\/\\/.+/.test(v);\n        },\n        message: 'Screenshot must be a valid URL'\n      }\n    }],\n    challenges: {\n      type: String,\n      default: \"\",\n      trim: true,\n      maxlength: [1000, 'Challenges cannot exceed 1000 characters']\n    },\n    outcome: {\n      type: String,\n      default: \"\",\n      trim: true,\n      maxlength: [1000, 'Outcome cannot exceed 1000 characters']\n    },\n  },\n  {\n    timestamps: true,\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true }\n  },\n);\n\n// Contact Message Schema with improved validation\nconst ContactMessageSchema = new mongoose.Schema(\n  {\n    userId: {\n      type: String,\n      required: [true, 'User ID is required'],\n      trim: true\n    },\n    name: {\n      type: String,\n      required: [true, 'Name is required'],\n      trim: true,\n      maxlength: [100, 'Name cannot exceed 100 characters']\n    },\n    email: {\n      type: String,\n      required: [true, 'Email is required'],\n      validate: {\n        validator: function (v: string) {\n          return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(v);\n        },\n        message: 'Please provide a valid email address'\n      }\n    },\n    phone: {\n      type: String,\n      default: \"\",\n      trim: true,\n      validate: {\n        validator: function (v: string) {\n          return v === \"\" || /^[\\+]?[0-9\\s\\-\\(\\)]{10,}$/.test(v);\n        },\n        message: 'Please provide a valid phone number'\n      }\n    },\n    subject: {\n      type: String,\n      required: [true, 'Subject is required'],\n      trim: true,\n      maxlength: [200, 'Subject cannot exceed 200 characters']\n    },\n    message: {\n      type: String,\n      required: [true, 'Message is required'],\n      trim: true,\n      maxlength: [2000, 'Message cannot exceed 2000 characters']\n    },\n    contactMethod: {\n      type: String,\n      enum: {\n        values: [\"email\", \"sms\", \"call\"],\n        message: 'Contact method must be one of: email, sms, call'\n      },\n      default: \"email\",\n    },\n    status: {\n      type: String,\n      enum: {\n        values: [\"new\", \"replied\"],\n        message: 'Status must be one of: new, replied'\n      },\n      default: \"new\"\n    },\n    date: {\n      type: String,\n      default: () => new Date().toISOString().split(\"T\")[0],\n      validate: {\n        validator: function (v: string) {\n          return /^\\d{4}-\\d{2}-\\d{2}$/.test(v);\n        },\n        message: 'Date must be in YYYY-MM-DD format'\n      }\n    },\n  },\n  {\n    timestamps: true,\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true }\n  },\n);\n\n// Git Settings Schema with improved validation\nconst GitSettingsSchema = new mongoose.Schema(\n  {\n    userId: {\n      type: String,\n      required: [true, 'User ID is required'],\n      unique: true,\n      trim: true\n    },\n    username: {\n      type: String,\n      default: \"kanuprajapati\",\n      trim: true,\n      maxlength: [50, 'Username cannot exceed 50 characters']\n    },\n    accessToken: {\n      type: String,\n      default: \"\",\n      trim: true\n    },\n    isConnected: {\n      type: Boolean,\n      default: true\n    },\n  },\n  {\n    timestamps: true,\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true }\n  },\n);\n\n// Project Screenshots Schema (for additional screenshots)\nconst ProjectScreenshotSchema = new mongoose.Schema(\n  {\n    userId: {\n      type: String,\n      required: [true, 'User ID is required'],\n      trim: true\n    },\n    projectId: {\n      type: String,\n      required: [true, 'Project ID is required'],\n      trim: true\n    },\n    screenshots: [{\n      type: String,\n      validate: {\n        validator: function (v: string) {\n          return /^https?:\\/\\/.+/.test(v);\n        },\n        message: 'Screenshot must be a valid URL'\n      }\n    }],\n  },\n  {\n    timestamps: true,\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true }\n  },\n);\n\n// SMS Notification Schema with improved validation\nconst SMSNotificationSchema = new mongoose.Schema(\n  {\n    userId: {\n      type: String,\n      required: [true, 'User ID is required'],\n      trim: true\n    },\n    message: {\n      type: String,\n      required: [true, 'Message is required'],\n      trim: true,\n      maxlength: [500, 'Message cannot exceed 500 characters']\n    },\n    phone: {\n      type: String,\n      required: [true, 'Phone number is required'],\n      trim: true,\n      validate: {\n        validator: function (v: string) {\n          return /^[\\+]?[0-9\\s\\-\\(\\)]{10,}$/.test(v);\n        },\n        message: 'Please provide a valid phone number'\n      }\n    },\n    category: {\n      type: String,\n      default: \"Contact\",\n      trim: true,\n      maxlength: [50, 'Category cannot exceed 50 characters']\n    },\n    status: {\n      type: String,\n      enum: {\n        values: [\"sent\", \"pending\", \"failed\"],\n        message: 'Status must be one of: sent, pending, failed'\n      },\n      default: \"sent\"\n    },\n    timestamp: {\n      type: Date,\n      default: Date.now\n    },\n  },\n  {\n    timestamps: true,\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true }\n  },\n);\n\n// SMS Categories Schema with improved validation\nconst SMSCategorySchema = new mongoose.Schema(\n  {\n    userId: {\n      type: String,\n      required: [true, 'User ID is required'],\n      trim: true\n    },\n    categories: [{\n      type: String,\n      trim: true,\n      maxlength: [50, 'Each category cannot exceed 50 characters']\n    }],\n  },\n  {\n    timestamps: true,\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true }\n  },\n);\n\n// User Settings Schema with improved validation\nconst UserSettingsSchema = new mongoose.Schema(\n  {\n    userId: {\n      type: String,\n      required: [true, 'User ID is required'],\n      unique: true,\n      trim: true\n    },\n    // Admin site settings\n    siteSettings: {\n      siteName: {\n        type: String,\n        default: \"Kanu Prajapati Portfolio\",\n        trim: true,\n        maxlength: [100, 'Site name cannot exceed 100 characters']\n      },\n      siteDescription: {\n        type: String,\n        default: \"Full-stack Developer specializing in modern web technologies\",\n        trim: true,\n        maxlength: [300, 'Site description cannot exceed 300 characters']\n      },\n      maintenanceMode: {\n        type: Boolean,\n        default: false\n      },\n      allowRegistration: {\n        type: Boolean,\n        default: false\n      },\n      seoEnabled: {\n        type: Boolean,\n        default: true\n      },\n    },\n    // Notification settings\n    notificationSettings: {\n      emailNotifications: {\n        type: Boolean,\n        default: true\n      },\n      smsNotifications: {\n        type: Boolean,\n        default: false\n      },\n      pushNotifications: {\n        type: Boolean,\n        default: true\n      },\n      emailOnNewMessage: {\n        type: Boolean,\n        default: true\n      },\n      smsOnUrgent: {\n        type: Boolean,\n        default: false\n      },\n      mobileNumber: {\n        type: String,\n        default: \"\",\n        validate: {\n          validator: function (v: string) {\n            return v === \"\" || /^[\\+]?[0-9\\s\\-\\(\\)]{10,}$/.test(v);\n          },\n          message: 'Please provide a valid mobile number'\n        }\n      },\n    },\n    theme: {\n      type: String,\n      enum: {\n        values: [\"light\", \"dark\", \"system\"],\n        message: 'Theme must be one of: light, dark, system'\n      },\n      default: \"system\"\n    },\n    language: {\n      type: String,\n      default: \"en\",\n      enum: {\n        values: [\"en\", \"hi\", \"gu\"],\n        message: 'Language must be one of: en, hi, gu'\n      }\n    },\n  },\n  {\n    timestamps: true,\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true }\n  },\n);\n\n// Activities Schema with improved validation\nconst ActivitySchema = new mongoose.Schema(\n  {\n    userId: {\n      type: String,\n      required: [true, 'User ID is required'],\n      trim: true\n    },\n    title: {\n      type: String,\n      required: [true, 'Activity title is required'],\n      trim: true,\n      maxlength: [100, 'Activity title cannot exceed 100 characters']\n    },\n    description: {\n      type: String,\n      required: [true, 'Activity description is required'],\n      trim: true,\n      maxlength: [500, 'Activity description cannot exceed 500 characters']\n    },\n    type: {\n      type: String,\n      enum: {\n        values: [\"project\", \"skill\", \"achievement\", \"education\", \"work\"],\n        message: 'Type must be one of: project, skill, achievement, education, work'\n      },\n      default: \"project\",\n    },\n    date: {\n      type: String,\n      required: [true, 'Activity date is required'],\n      validate: {\n        validator: function (v: string) {\n          return /^\\d{4}-\\d{2}-\\d{2}$/.test(v);\n        },\n        message: 'Date must be in YYYY-MM-DD format'\n      }\n    },\n    icon: {\n      type: String,\n      default: \"üìã\",\n      trim: true,\n      maxlength: [10, 'Icon cannot exceed 10 characters']\n    },\n    category: {\n      type: String,\n      default: \"General\",\n      trim: true,\n      maxlength: [50, 'Category cannot exceed 50 characters']\n    },\n  },\n  {\n    timestamps: true,\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true }\n  },\n);\n\n// Skills Schema with improved validation\nconst SkillSchema = new mongoose.Schema(\n  {\n    userId: {\n      type: String,\n      required: [true, 'User ID is required'],\n      trim: true\n    },\n    name: {\n      type: String,\n      required: [true, 'Skill name is required'],\n      trim: true,\n      maxlength: [100, 'Skill name cannot exceed 100 characters']\n    },\n    category: {\n      type: String,\n      required: [true, 'Skill category is required'],\n      trim: true,\n      maxlength: [50, 'Skill category cannot exceed 50 characters']\n    },\n    level: {\n      type: Number,\n      min: [1, 'Skill level must be at least 1'],\n      max: [100, 'Skill level cannot exceed 100'],\n      default: 50,\n      validate: {\n        validator: Number.isInteger,\n        message: 'Skill level must be a whole number'\n      }\n    },\n    years: {\n      type: Number,\n      default: 1,\n      min: [0, 'Years cannot be negative'],\n      max: [50, 'Years cannot exceed 50'],\n      validate: {\n        validator: Number.isInteger,\n        message: 'Years must be a whole number'\n      }\n    },\n    icon: {\n      type: String,\n      default: \"‚ö°\",\n      trim: true,\n      maxlength: [10, 'Icon cannot exceed 10 characters']\n    },\n  },\n  {\n    timestamps: true,\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true }\n  },\n);\n\n// File Storage Schema for persistent file storage\nconst FileStorageSchema = new mongoose.Schema(\n  {\n    userId: {\n      type: String,\n      required: [true, 'User ID is required'],\n      trim: true\n    },\n    filename: {\n      type: String,\n      required: [true, 'Filename is required'],\n      trim: true,\n      maxlength: [255, 'Filename cannot exceed 255 characters']\n    },\n    originalName: {\n      type: String,\n      required: [true, 'Original filename is required'],\n      trim: true,\n      maxlength: [255, 'Original filename cannot exceed 255 characters']\n    },\n    mimeType: {\n      type: String,\n      required: [true, 'MIME type is required'],\n      trim: true,\n      maxlength: [100, 'MIME type cannot exceed 100 characters']\n    },\n    fileType: {\n      type: String,\n      required: [true, 'File type is required'],\n      enum: {\n        values: ['profile-image', 'project-image', 'document', 'resume'],\n        message: 'File type must be one of: profile-image, project-image, document, resume'\n      }\n    },\n    fileSize: {\n      type: Number,\n      required: [true, 'File size is required'],\n      min: [1, 'File size must be at least 1 byte'],\n      max: [10 * 1024 * 1024, 'File size cannot exceed 10MB']\n    },\n    fileData: {\n      type: Buffer,\n      required: [true, 'File data is required']\n    },\n    publicUrl: {\n      type: String,\n      required: [true, 'Public URL is required'],\n      trim: true,\n      maxlength: [500, 'Public URL cannot exceed 500 characters']\n    },\n    isActive: {\n      type: Boolean,\n      default: true\n    },\n    metadata: {\n      type: mongoose.Schema.Types.Mixed,\n      default: {}\n    }\n  },\n  {\n    timestamps: true,\n    toJSON: {\n      virtuals: true,\n      transform: function (doc, ret) {\n        // Don't include fileData in JSON responses for performance\n        delete ret.fileData;\n        return ret;\n      }\n    },\n    toObject: { virtuals: true }\n  },\n);\n\n// Add indexes for better performance (avoid duplicating indexes created by unique fields)\nProjectSchema.index({ userId: 1, createdAt: -1 });\nProjectSchema.index({ userId: 1, status: 1 });\nContactMessageSchema.index({ userId: 1, createdAt: -1 });\nContactMessageSchema.index({ userId: 1, status: 1 });\nActivitySchema.index({ userId: 1, type: 1, date: -1 });\nSkillSchema.index({ userId: 1, category: 1 });\nFileStorageSchema.index({ userId: 1, fileType: 1 });\nFileStorageSchema.index({ userId: 1, filename: 1 });\nFileStorageSchema.index({ userId: 1, isActive: 1 });\n\n// Export models\nexport const Profile = mongoose.models.Profile || mongoose.model(\"Profile\", ProfileSchema);\nexport const Project = mongoose.models.Project || mongoose.model(\"Project\", ProjectSchema);\nexport const ContactMessage = mongoose.models.ContactMessage || mongoose.model(\n  \"ContactMessage\",\n  ContactMessageSchema,\n);\nexport const GitSettings = mongoose.models.GitSettings || mongoose.model(\"GitSettings\", GitSettingsSchema);\nexport const ProjectScreenshot = mongoose.models.ProjectScreenshot || mongoose.model(\n  \"ProjectScreenshot\",\n  ProjectScreenshotSchema,\n);\nexport const SMSNotification = mongoose.models.SMSNotification || mongoose.model(\n  \"SMSNotification\",\n  SMSNotificationSchema,\n);\nexport const SMSCategory = mongoose.models.SMSCategory || mongoose.model(\"SMSCategory\", SMSCategorySchema);\nexport const UserSettings = mongoose.models.UserSettings || mongoose.model(\"UserSettings\", UserSettingsSchema);\nexport const Activity = mongoose.models.Activity || mongoose.model(\"Activity\", ActivitySchema);\nexport const Skill = mongoose.models.Skill || mongoose.model(\"Skill\", SkillSchema);\nexport const FileStorage = mongoose.models.FileStorage || mongoose.model(\"FileStorage\", FileStorageSchema);\n","import express from \"express\";\nimport { Profile } from \"../models/index.js\";\nimport { isMongoDBAvailable } from \"../database/connection.js\";\n\nconst router = express.Router();\n\n// Middleware to check MongoDB availability\nconst checkMongoDB = (req: express.Request, res: express.Response, next: express.NextFunction) => {\n  if (!isMongoDBAvailable()) {\n    return res.status(503).json({\n      error: \"MongoDB not available\",\n      message: \"Please use localStorage or set up MongoDB connection\",\n      code: \"MONGODB_UNAVAILABLE\"\n    });\n  }\n  next();\n};\n\n// Get profile\nrouter.get(\"/\", checkMongoDB, async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\"; // Default user ID\n    let profile = await Profile.findOne({ userId });\n\n    if (!profile) {\n      // Create default profile if doesn't exist\n      profile = new Profile({ userId });\n      await profile.save();\n      console.log(\"‚úÖ Created default profile for user:\", userId);\n    }\n\n    res.json({\n      success: true,\n      data: profile,\n      message: \"Profile retrieved successfully\"\n    });\n  } catch (error) {\n    console.error(\"‚ùå Error fetching profile:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"Failed to fetch profile\",\n      message: error.message\n    });\n  }\n});\n\n// Update profile\nrouter.put(\"/\", checkMongoDB, async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const updateData = req.body;\n\n    // Validate required fields\n    if (!updateData) {\n      return res.status(400).json({\n        success: false,\n        error: \"Missing update data\",\n        message: \"Please provide data to update\"\n      });\n    }\n\n    const profile = await Profile.findOneAndUpdate(\n      { userId },\n      updateData,\n      {\n        new: true,\n        upsert: true,\n        runValidators: true // Run schema validators\n      }\n    );\n\n    res.json({\n      success: true,\n      data: profile,\n      message: \"Profile updated successfully\"\n    });\n  } catch (error) {\n    console.error(\"‚ùå Error updating profile:\", error);\n\n    if (error.name === 'ValidationError') {\n      return res.status(400).json({\n        success: false,\n        error: \"Validation Error\",\n        message: error.message,\n        details: error.errors\n      });\n    }\n\n    res.status(500).json({\n      success: false,\n      error: \"Failed to update profile\",\n      message: error.message\n    });\n  }\n});\n\n// Update profile image\nrouter.put(\"/image\", checkMongoDB, async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const { profileImage } = req.body;\n\n    if (!profileImage) {\n      return res.status(400).json({\n        success: false,\n        error: \"Missing profile image\",\n        message: \"Please provide a profile image URL\"\n      });\n    }\n\n    const profile = await Profile.findOneAndUpdate(\n      { userId },\n      { profileImage },\n      {\n        new: true,\n        upsert: true,\n        runValidators: true\n      }\n    );\n\n    res.json({\n      success: true,\n      data: profile,\n      message: \"Profile image updated successfully\"\n    });\n  } catch (error) {\n    console.error(\"‚ùå Error updating profile image:\", error);\n\n    if (error.name === 'ValidationError') {\n      return res.status(400).json({\n        success: false,\n        error: \"Validation Error\",\n        message: error.message,\n        details: error.errors\n      });\n    }\n\n    res.status(500).json({\n      success: false,\n      error: \"Failed to update profile image\",\n      message: error.message\n    });\n  }\n});\n\n// Update logo\nrouter.put(\"/logo\", checkMongoDB, async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const { logoText } = req.body;\n\n    if (!logoText) {\n      return res.status(400).json({\n        success: false,\n        error: \"Missing logo text\",\n        message: \"Please provide logo text\"\n      });\n    }\n\n    const profile = await Profile.findOneAndUpdate(\n      { userId },\n      { logoText },\n      {\n        new: true,\n        upsert: true,\n        runValidators: true\n      }\n    );\n\n    res.json({\n      success: true,\n      data: profile,\n      message: \"Logo updated successfully\"\n    });\n  } catch (error) {\n    console.error(\"‚ùå Error updating logo:\", error);\n\n    if (error.name === 'ValidationError') {\n      return res.status(400).json({\n        success: false,\n        error: \"Validation Error\",\n        message: error.message,\n        details: error.errors\n      });\n    }\n\n    res.status(500).json({\n      success: false,\n      error: \"Failed to update logo\",\n      message: error.message\n    });\n  }\n});\n\n// Update resume URL\nrouter.put(\"/resume\", checkMongoDB, async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const { resumeUrl } = req.body;\n\n    if (!resumeUrl) {\n      return res.status(400).json({\n        success: false,\n        error: \"Missing resume URL\",\n        message: \"Please provide a resume URL\"\n      });\n    }\n\n    const profile = await Profile.findOneAndUpdate(\n      { userId },\n      { resumeUrl },\n      {\n        new: true,\n        upsert: true,\n        runValidators: true\n      }\n    );\n\n    res.json({\n      success: true,\n      data: profile,\n      message: \"Resume URL updated successfully\"\n    });\n  } catch (error) {\n    console.error(\"‚ùå Error updating resume URL:\", error);\n\n    if (error.name === 'ValidationError') {\n      return res.status(400).json({\n        success: false,\n        error: \"Validation Error\",\n        message: error.message,\n        details: error.errors\n      });\n    }\n\n    res.status(500).json({\n      success: false,\n      error: \"Failed to update resume URL\",\n      message: error.message\n    });\n  }\n});\n\n// Update contact info\nrouter.put(\"/contact\", checkMongoDB, async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const { contactInfo } = req.body;\n\n    if (!contactInfo) {\n      return res.status(400).json({\n        success: false,\n        error: \"Missing contact info\",\n        message: \"Please provide contact information\"\n      });\n    }\n\n    const profile = await Profile.findOneAndUpdate(\n      { userId },\n      { contactInfo },\n      {\n        new: true,\n        upsert: true,\n        runValidators: true\n      }\n    );\n\n    res.json({\n      success: true,\n      data: profile,\n      message: \"Contact info updated successfully\"\n    });\n  } catch (error) {\n    console.error(\"‚ùå Error updating contact info:\", error);\n\n    if (error.name === 'ValidationError') {\n      return res.status(400).json({\n        success: false,\n        error: \"Validation Error\",\n        message: error.message,\n        details: error.errors\n      });\n    }\n\n    res.status(500).json({\n      success: false,\n      error: \"Failed to update contact info\",\n      message: error.message\n    });\n  }\n});\n\n// Delete profile (admin only)\nrouter.delete(\"/\", checkMongoDB, async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const profile = await Profile.findOneAndDelete({ userId });\n\n    if (!profile) {\n      return res.status(404).json({\n        success: false,\n        error: \"Profile not found\",\n        message: \"No profile exists for this user\"\n      });\n    }\n\n    res.json({\n      success: true,\n      message: \"Profile deleted successfully\",\n      deletedProfile: profile\n    });\n  } catch (error) {\n    console.error(\"‚ùå Error deleting profile:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"Failed to delete profile\",\n      message: error.message\n    });\n  }\n});\n\n// Get profile statistics\nrouter.get(\"/stats\", checkMongoDB, async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const profile = await Profile.findOne({ userId });\n\n    if (!profile) {\n      return res.status(404).json({\n        success: false,\n        error: \"Profile not found\",\n        message: \"No profile exists for this user\"\n      });\n    }\n\n    const stats = {\n      lastUpdated: profile.updatedAt,\n      createdAt: profile.createdAt,\n      hasProfileImage: !!profile.profileImage,\n      hasResume: !!profile.resumeUrl,\n      contactInfoComplete: !!(profile.contactInfo?.email && profile.contactInfo?.phone),\n      socialLinks: {\n        linkedin: !!profile.contactInfo?.linkedin,\n        github: !!profile.contactInfo?.github\n      }\n    };\n\n    res.json({\n      success: true,\n      data: stats,\n      message: \"Profile statistics retrieved successfully\"\n    });\n  } catch (error) {\n    console.error(\"‚ùå Error fetching profile stats:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"Failed to fetch profile statistics\",\n      message: error.message\n    });\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport { Project } from \"../models/index.js\";\nimport { isMongoDBAvailable } from \"../database/connection.js\";\n\nconst router = express.Router();\n\n// Middleware to check MongoDB availability\nconst checkMongoDB = (req: express.Request, res: express.Response, next: express.NextFunction) => {\n  if (!isMongoDBAvailable()) {\n    return res.status(503).json({\n      error: \"MongoDB not available\",\n      message: \"Please use localStorage or set up MongoDB connection\",\n      code: \"MONGODB_UNAVAILABLE\"\n    });\n  }\n  next();\n};\n\n// Get all projects\nrouter.get(\"/\", checkMongoDB, async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const { status, category, limit, page } = req.query;\n\n    // Build query\n    let query: any = { userId };\n\n    if (status) {\n      query.status = status;\n    }\n\n    if (category) {\n      query.tags = { $in: [category] };\n    }\n\n    // Pagination\n    const pageNum = parseInt(page as string) || 1;\n    const limitNum = parseInt(limit as string) || 10;\n    const skip = (pageNum - 1) * limitNum;\n\n    const projects = await Project.find(query)\n      .sort({ createdAt: -1 })\n      .skip(skip)\n      .limit(limitNum);\n\n    const total = await Project.countDocuments(query);\n\n    res.json({\n      success: true,\n      data: projects,\n      pagination: {\n        page: pageNum,\n        limit: limitNum,\n        total,\n        pages: Math.ceil(total / limitNum)\n      },\n      message: `Retrieved ${projects.length} projects successfully`\n    });\n  } catch (error) {\n    console.error(\"‚ùå Error fetching projects:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"Failed to fetch projects\",\n      message: error.message\n    });\n  }\n});\n\n// Get project by ID\nrouter.get(\"/:id\", checkMongoDB, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const userId = \"kanu-portfolio\";\n\n    const project = await Project.findOne({ _id: id, userId });\n\n    if (!project) {\n      return res.status(404).json({\n        success: false,\n        error: \"Project not found\",\n        message: \"No project found with the provided ID\"\n      });\n    }\n\n    res.json({\n      success: true,\n      data: project,\n      message: \"Project retrieved successfully\"\n    });\n  } catch (error) {\n    console.error(\"‚ùå Error fetching project:\", error);\n\n    if (error.name === 'CastError') {\n      return res.status(400).json({\n        success: false,\n        error: \"Invalid ID format\",\n        message: \"Please provide a valid project ID\"\n      });\n    }\n\n    res.status(500).json({\n      success: false,\n      error: \"Failed to fetch project\",\n      message: error.message\n    });\n  }\n});\n\n// Create new project\nrouter.post(\"/\", checkMongoDB, async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const projectData = { ...req.body, userId };\n\n    // Validate required fields\n    if (!projectData.title || !projectData.description || !projectData.image) {\n      return res.status(400).json({\n        success: false,\n        error: \"Missing required fields\",\n        message: \"Title, description, and image are required\",\n        required: [\"title\", \"description\", \"image\"]\n      });\n    }\n\n    // Set default values for missing fields\n    if (!projectData.fullDescription) {\n      projectData.fullDescription = `This is a project developed with modern web technologies.\n\nKey Features:\n‚Ä¢ Modern and responsive design\n‚Ä¢ Clean and efficient code structure\n‚Ä¢ User-friendly interface\n‚Ä¢ Cross-platform compatibility\n\nTechnical Implementation:\nBuilt using industry-standard technologies and best practices to ensure optimal performance and maintainability.`;\n    }\n\n    if (!projectData.challenges) {\n      projectData.challenges =\n        \"Developing a robust and scalable solution while maintaining clean code architecture and ensuring optimal user experience.\";\n    }\n\n    if (!projectData.outcome) {\n      projectData.outcome =\n        \"Successfully delivered a high-quality project that meets all requirements and provides excellent user experience.\";\n    }\n\n    if (!projectData.screenshots) {\n      projectData.screenshots = [\n        projectData.image,\n        projectData.image,\n        projectData.image,\n      ];\n    }\n\n    if (!projectData.dateCompleted) {\n      projectData.dateCompleted = new Date().toISOString().split(\"T\")[0];\n    }\n\n    const project = new Project(projectData);\n    await project.save();\n\n    console.log(\"‚úÖ Created new project:\", project.title);\n\n    res.status(201).json({\n      success: true,\n      data: project,\n      message: \"Project created successfully\"\n    });\n  } catch (error) {\n    console.error(\"‚ùå Error creating project:\", error);\n\n    if (error.name === 'ValidationError') {\n      return res.status(400).json({\n        success: false,\n        error: \"Validation Error\",\n        message: error.message,\n        details: error.errors\n      });\n    }\n\n    res.status(500).json({\n      success: false,\n      error: \"Failed to create project\",\n      message: error.message\n    });\n  }\n});\n\n// Update project\nrouter.put(\"/:id\", checkMongoDB, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const userId = \"kanu-portfolio\";\n    const updateData = req.body;\n\n    if (!updateData || Object.keys(updateData).length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: \"Missing update data\",\n        message: \"Please provide data to update\"\n      });\n    }\n\n    const project = await Project.findOneAndUpdate(\n      { _id: id, userId },\n      updateData,\n      {\n        new: true,\n        runValidators: true\n      }\n    );\n\n    if (!project) {\n      return res.status(404).json({\n        success: false,\n        error: \"Project not found\",\n        message: \"No project found with the provided ID\"\n      });\n    }\n\n    console.log(\"‚úÖ Updated project:\", project.title);\n\n    res.json({\n      success: true,\n      data: project,\n      message: \"Project updated successfully\"\n    });\n  } catch (error) {\n    console.error(\"‚ùå Error updating project:\", error);\n\n    if (error.name === 'ValidationError') {\n      return res.status(400).json({\n        success: false,\n        error: \"Validation Error\",\n        message: error.message,\n        details: error.errors\n      });\n    }\n\n    if (error.name === 'CastError') {\n      return res.status(400).json({\n        success: false,\n        error: \"Invalid ID format\",\n        message: \"Please provide a valid project ID\"\n      });\n    }\n\n    res.status(500).json({\n      success: false,\n      error: \"Failed to update project\",\n      message: error.message\n    });\n  }\n});\n\n// Delete project\nrouter.delete(\"/:id\", checkMongoDB, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const userId = \"kanu-portfolio\";\n\n    const project = await Project.findOneAndDelete({ _id: id, userId });\n\n    if (!project) {\n      return res.status(404).json({\n        success: false,\n        error: \"Project not found\",\n        message: \"No project found with the provided ID\"\n      });\n    }\n\n    console.log(\"‚úÖ Deleted project:\", project.title);\n\n    res.json({\n      success: true,\n      message: \"Project deleted successfully\",\n      deletedProject: project\n    });\n  } catch (error) {\n    console.error(\"‚ùå Error deleting project:\", error);\n\n    if (error.name === 'CastError') {\n      return res.status(400).json({\n        success: false,\n        error: \"Invalid ID format\",\n        message: \"Please provide a valid project ID\"\n      });\n    }\n\n    res.status(500).json({\n      success: false,\n      error: \"Failed to delete project\",\n      message: error.message\n    });\n  }\n});\n\n// Get project statistics\nrouter.get(\"/stats/overview\", checkMongoDB, async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n\n    const stats = await Project.aggregate([\n      { $match: { userId } },\n      {\n        $group: {\n          _id: null,\n          totalProjects: { $sum: 1 },\n          completedProjects: {\n            $sum: { $cond: [{ $eq: [\"$status\", \"Completed\"] }, 1, 0] }\n          },\n          liveProjects: {\n            $sum: { $cond: [{ $eq: [\"$status\", \"Live\"] }, 1, 0] }\n          },\n          inDevelopmentProjects: {\n            $sum: { $cond: [{ $eq: [\"$status\", \"In Development\"] }, 1, 0] }\n          },\n          publishedProjects: {\n            $sum: { $cond: [{ $eq: [\"$status\", \"Published\"] }, 1, 0] }\n          }\n        }\n      }\n    ]);\n\n    const totalTags = await Project.aggregate([\n      { $match: { userId } },\n      { $unwind: \"$tags\" },\n      { $group: { _id: \"$tags\", count: { $sum: 1 } } },\n      { $sort: { count: -1 } },\n      { $limit: 10 }\n    ]);\n\n    const response = {\n      success: true,\n      data: {\n        overview: stats[0] || {\n          totalProjects: 0,\n          completedProjects: 0,\n          liveProjects: 0,\n          inDevelopmentProjects: 0,\n          publishedProjects: 0\n        },\n        topTags: totalTags,\n        totalTags: totalTags.length\n      },\n      message: \"Project statistics retrieved successfully\"\n    };\n\n    res.json(response);\n  } catch (error) {\n    console.error(\"‚ùå Error fetching project stats:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"Failed to fetch project statistics\",\n      message: error.message\n    });\n  }\n});\n\n// Search projects\nrouter.get(\"/search\", checkMongoDB, async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const { q, status, tags, limit = 10 } = req.query;\n\n    let query: any = { userId };\n\n    // Text search\n    if (q) {\n      query.$or = [\n        { title: { $regex: q, $options: 'i' } },\n        { description: { $regex: q, $options: 'i' } },\n        { fullDescription: { $regex: q, $options: 'i' } },\n        { tags: { $in: [new RegExp(q, 'i')] } }\n      ];\n    }\n\n    // Filter by status\n    if (status) {\n      query.status = status;\n    }\n\n    // Filter by tags\n    if (tags) {\n      const tagArray = Array.isArray(tags) ? tags : [tags];\n      query.tags = { $in: tagArray };\n    }\n\n    const projects = await Project.find(query)\n      .sort({ createdAt: -1 })\n      .limit(parseInt(limit as string));\n\n    res.json({\n      success: true,\n      data: projects,\n      count: projects.length,\n      message: `Found ${projects.length} projects matching your search`\n    });\n  } catch (error) {\n    console.error(\"‚ùå Error searching projects:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"Failed to search projects\",\n      message: error.message\n    });\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport { ContactMessage } from \"../models/index.js\";\n\nconst router = express.Router();\n\n// Get all contact messages\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const messages = await ContactMessage.find({ userId }).sort({\n      createdAt: -1,\n    });\n    res.json(messages);\n  } catch (error) {\n    console.error(\"Error fetching contact messages:\", error);\n    res.status(500).json({ error: \"Failed to fetch contact messages\" });\n  }\n});\n\n// Create new contact message\nrouter.post(\"/\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const messageData = { ...req.body, userId };\n\n    const message = new ContactMessage(messageData);\n    await message.save();\n\n    res.status(201).json(message);\n  } catch (error) {\n    console.error(\"Error creating contact message:\", error);\n    res.status(500).json({ error: \"Failed to create contact message\" });\n  }\n});\n\n// Update contact message status\nrouter.put(\"/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { status } = req.body;\n\n    const message = await ContactMessage.findByIdAndUpdate(\n      id,\n      { status },\n      { new: true },\n    );\n\n    if (!message) {\n      return res.status(404).json({ error: \"Contact message not found\" });\n    }\n\n    res.json(message);\n  } catch (error) {\n    console.error(\"Error updating contact message:\", error);\n    res.status(500).json({ error: \"Failed to update contact message\" });\n  }\n});\n\n// Delete contact message\nrouter.delete(\"/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const message = await ContactMessage.findByIdAndDelete(id);\n\n    if (!message) {\n      return res.status(404).json({ error: \"Contact message not found\" });\n    }\n\n    res.json({ message: \"Contact message deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error deleting contact message:\", error);\n    res.status(500).json({ error: \"Failed to delete contact message\" });\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport { GitSettings } from \"../models/index.js\";\n\nconst router = express.Router();\n\n// Get git settings\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    let settings = await GitSettings.findOne({ userId });\n\n    if (!settings) {\n      // Create default settings if doesn't exist\n      settings = new GitSettings({ userId });\n      await settings.save();\n    }\n\n    res.json(settings);\n  } catch (error) {\n    console.error(\"Error fetching git settings:\", error);\n    res.status(500).json({ error: \"Failed to fetch git settings\" });\n  }\n});\n\n// Update git settings\nrouter.put(\"/\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const updateData = req.body;\n\n    const settings = await GitSettings.findOneAndUpdate(\n      { userId },\n      updateData,\n      { new: true, upsert: true },\n    );\n\n    res.json(settings);\n  } catch (error) {\n    console.error(\"Error updating git settings:\", error);\n    res.status(500).json({ error: \"Failed to update git settings\" });\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport {\n  Profile,\n  Project,\n  ContactMessage,\n  GitSettings,\n  SMSNotification,\n  SMSCategory,\n  UserSettings,\n  Activity,\n  Skill,\n} from \"../models/index.js\";\nimport { isMongoDBAvailable } from \"../database/connection.js\";\n\nconst router = express.Router();\n\n// Migrate data from localStorage to MongoDB\nrouter.post(\"/migrate\", async (req, res) => {\n  try {\n    if (!isMongoDBAvailable()) {\n      return res.status(503).json({\n        success: false,\n        error: \"MongoDB not available\",\n        message:\n          \"MongoDB is not connected. Please set up MongoDB and set ENABLE_MONGODB=true to use migration.\",\n        mongodbAvailable: false,\n      });\n    }\n\n    const { localStorageData } = req.body;\n    const userId = \"kanu-portfolio\";\n\n    const migrationResults = {\n      profile: null,\n      projects: [],\n      contacts: [],\n      gitSettings: null,\n      smsNotifications: [],\n      smsCategories: null,\n      userSettings: null,\n      activities: [],\n      skills: [],\n      errors: [],\n    };\n\n    // Migrate profile data\n    if (localStorageData.profileData) {\n      try {\n        const profileData = JSON.parse(localStorageData.profileData);\n        const profile = await Profile.findOneAndUpdate(\n          { userId },\n          { ...profileData, userId },\n          { new: true, upsert: true },\n        );\n        migrationResults.profile = profile;\n      } catch (error) {\n        migrationResults.errors.push(\n          \"Failed to migrate profile data: \" + error.message,\n        );\n      }\n    }\n\n    // Migrate projects data\n    if (localStorageData.adminProjects) {\n      try {\n        const projectsData = JSON.parse(localStorageData.adminProjects);\n        for (const projectData of projectsData) {\n          // Check if project already exists\n          const existingProject = await Project.findOne({\n            userId,\n            title: projectData.title,\n          });\n\n          if (!existingProject) {\n            const project = new Project({\n              ...projectData,\n              userId,\n              fullDescription:\n                projectData.fullDescription ||\n                `This is a project developed with modern web technologies.\n\nKey Features:\n‚Ä¢ Modern and responsive design\n‚Ä¢ Clean and efficient code structure\n‚Ä¢ User-friendly interface\n‚Ä¢ Cross-platform compatibility\n\nTechnical Implementation:\nBuilt using industry-standard technologies and best practices to ensure optimal performance and maintainability.`,\n              challenges:\n                projectData.challenges ||\n                \"Developing a robust and scalable solution while maintaining clean code architecture and ensuring optimal user experience.\",\n              outcome:\n                projectData.outcome ||\n                \"Successfully delivered a high-quality project that meets all requirements and provides excellent user experience.\",\n              screenshots: projectData.screenshots || [\n                projectData.image,\n                projectData.image,\n                projectData.image,\n              ],\n              dateCompleted:\n                projectData.dateCompleted ||\n                new Date().toISOString().split(\"T\")[0],\n            });\n            await project.save();\n            migrationResults.projects.push(project);\n          }\n        }\n      } catch (error) {\n        migrationResults.errors.push(\n          \"Failed to migrate projects data: \" + error.message,\n        );\n      }\n    }\n\n    // Migrate contact messages\n    if (localStorageData.contactMessages) {\n      try {\n        const contactsData = JSON.parse(localStorageData.contactMessages);\n        for (const contactData of contactsData) {\n          // Check if message already exists\n          const existingMessage = await ContactMessage.findOne({\n            userId,\n            name: contactData.name,\n            email: contactData.email,\n            subject: contactData.subject,\n          });\n\n          if (!existingMessage) {\n            const message = new ContactMessage({\n              ...contactData,\n              userId,\n            });\n            await message.save();\n            migrationResults.contacts.push(message);\n          }\n        }\n      } catch (error) {\n        migrationResults.errors.push(\n          \"Failed to migrate contact messages: \" + error.message,\n        );\n      }\n    }\n\n    // Migrate git settings\n    if (localStorageData.gitSettings) {\n      try {\n        const gitData = JSON.parse(localStorageData.gitSettings);\n        const gitSettings = await GitSettings.findOneAndUpdate(\n          { userId },\n          { ...gitData, userId },\n          { new: true, upsert: true },\n        );\n        migrationResults.gitSettings = gitSettings;\n      } catch (error) {\n        migrationResults.errors.push(\n          \"Failed to migrate git settings: \" + error.message,\n        );\n      }\n    }\n\n    // Migrate SMS notifications\n    if (localStorageData.smsNotifications) {\n      try {\n        const smsData = JSON.parse(localStorageData.smsNotifications);\n        for (const smsItem of smsData) {\n          // Check if notification already exists\n          const existingNotification = await SMSNotification.findOne({\n            userId,\n            message: smsItem.message,\n            phone: smsItem.phone,\n            timestamp: smsItem.timestamp,\n          });\n\n          if (!existingNotification) {\n            const notification = new SMSNotification({\n              ...smsItem,\n              userId,\n            });\n            await notification.save();\n            migrationResults.smsNotifications.push(notification);\n          }\n        }\n      } catch (error) {\n        migrationResults.errors.push(\n          \"Failed to migrate SMS notifications: \" + error.message,\n        );\n      }\n    }\n\n    // Migrate SMS categories\n    if (localStorageData.smsCategories) {\n      try {\n        const categoriesData = JSON.parse(localStorageData.smsCategories);\n        const smsCategories = await SMSCategory.findOneAndUpdate(\n          { userId },\n          { categories: categoriesData, userId },\n          { new: true, upsert: true },\n        );\n        migrationResults.smsCategories = smsCategories;\n      } catch (error) {\n        migrationResults.errors.push(\n          \"Failed to migrate SMS categories: \" + error.message,\n        );\n      }\n    }\n\n    // Migrate notification settings\n    if (localStorageData.notificationSettings) {\n      try {\n        const settingsData = JSON.parse(localStorageData.notificationSettings);\n        const userSettings = await UserSettings.findOneAndUpdate(\n          { userId },\n          { notificationSettings: settingsData, userId },\n          { new: true, upsert: true },\n        );\n        migrationResults.userSettings = userSettings;\n      } catch (error) {\n        migrationResults.errors.push(\n          \"Failed to migrate notification settings: \" + error.message,\n        );\n      }\n    }\n\n    // Migrate activities\n    if (localStorageData.activities) {\n      try {\n        const activitiesData = JSON.parse(localStorageData.activities);\n        for (const activityData of activitiesData) {\n          // Check if activity already exists\n          const existingActivity = await Activity.findOne({\n            userId,\n            title: activityData.title,\n            date: activityData.date,\n          });\n\n          if (!existingActivity) {\n            const activity = new Activity({\n              ...activityData,\n              userId,\n            });\n            await activity.save();\n            migrationResults.activities.push(activity);\n          }\n        }\n      } catch (error) {\n        migrationResults.errors.push(\n          \"Failed to migrate activities: \" + error.message,\n        );\n      }\n    }\n\n    // Migrate skills\n    if (localStorageData.skills) {\n      try {\n        const skillsData = JSON.parse(localStorageData.skills);\n        for (const skillData of skillsData) {\n          // Check if skill already exists\n          const existingSkill = await Skill.findOne({\n            userId,\n            name: skillData.name,\n            category: skillData.category,\n          });\n\n          if (!existingSkill) {\n            const skill = new Skill({\n              ...skillData,\n              userId,\n            });\n            await skill.save();\n            migrationResults.skills.push(skill);\n          }\n        }\n      } catch (error) {\n        migrationResults.errors.push(\n          \"Failed to migrate skills: \" + error.message,\n        );\n      }\n    }\n\n    res.json({\n      success: true,\n      message: \"Data migration completed\",\n      results: migrationResults,\n    });\n  } catch (error) {\n    console.error(\"Migration error:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"Failed to migrate data\",\n      details: error.message,\n    });\n  }\n});\n\n// Get migration status\nrouter.get(\"/status\", async (req, res) => {\n  try {\n    if (!isMongoDBAvailable()) {\n      return res.json({\n        hasProfile: false,\n        projectsCount: 0,\n        contactsCount: 0,\n        hasGitSettings: false,\n        smsNotificationsCount: 0,\n        hasSmsCategories: false,\n        hasUserSettings: false,\n        activitiesCount: 0,\n        skillsCount: 0,\n        migrated: false,\n        mongodbAvailable: false,\n        message:\n          \"MongoDB is not available. Currently running in localStorage mode.\",\n      });\n    }\n\n    const userId = \"kanu-portfolio\";\n\n    const profile = await Profile.findOne({ userId });\n    const projectsCount = await Project.countDocuments({ userId });\n    const contactsCount = await ContactMessage.countDocuments({ userId });\n    const gitSettings = await GitSettings.findOne({ userId });\n    const smsNotificationsCount = await SMSNotification.countDocuments({ userId });\n    const smsCategories = await SMSCategory.findOne({ userId });\n    const userSettings = await UserSettings.findOne({ userId });\n    const activitiesCount = await Activity.countDocuments({ userId });\n    const skillsCount = await Skill.countDocuments({ userId });\n\n    res.json({\n      hasProfile: !!profile,\n      projectsCount,\n      contactsCount,\n      hasGitSettings: !!gitSettings,\n      smsNotificationsCount,\n      hasSmsCategories: !!smsCategories,\n      hasUserSettings: !!userSettings,\n      activitiesCount,\n      skillsCount,\n      migrated: !!(\n        profile ||\n        projectsCount > 0 ||\n        contactsCount > 0 ||\n        gitSettings ||\n        smsNotificationsCount > 0 ||\n        smsCategories ||\n        userSettings ||\n        activitiesCount > 0 ||\n        skillsCount > 0\n      ),\n      mongodbAvailable: true,\n    });\n  } catch (error) {\n    console.error(\"Error checking migration status:\", error);\n    res.status(500).json({ error: \"Failed to check migration status\" });\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport { SMSNotification, SMSCategory } from \"../models/index.js\";\n\n// Exotel API Configuration\nconst EXOTEL_API_KEY = \"54eb9c9619caf90688b7b471754ac2ec13cf8d8aee190085\";\nconst EXOTEL_API_TOKEN = \"5f4733d9896080a6e233b766a3ab157d9f26480325430b82\";\nconst EXOTEL_SID = \"kanu-portfolio\"; // Your Exotel SID - this might need to be your actual Exotel Account SID\nconst EXOTEL_FROM_NUMBER = \"+919876543210\"; // Your Exotel virtual number\nconst EXOTEL_SUBDOMAIN = \"api.exotel.com\"; // Exotel API subdomain\n\n// Working SMS service using Fast2SMS (India)\nasync function sendSMSSimple(to: string, message: string): Promise<{ success: boolean; messageId?: string; error?: string }> {\n  try {\n    console.log(\"üì± Attempting Fast2SMS service...\");\n\n    // Fast2SMS API Configuration\n    const FAST2SMS_API_KEY = \"nA4xNrqjHmmtHQFJNC7cd3O7cmKdB2rinF9jf82STNRfrpyiyOc4snEA0VCK\";\n    const FAST2SMS_SENDER = \"KANUPO\"; // Your sender name\n\n    // Clean phone number (remove +91, +, spaces)\n    const cleanNumber = to.replace(/^\\+91/, '').replace(/^\\+/, '').replace(/\\s/g, '');\n\n    console.log(\"üì± Fast2SMS Details:\");\n    console.log(\"   To:\", to, \"-> Clean:\", cleanNumber);\n    console.log(\"   Message:\", message);\n    console.log(\"   Sender:\", FAST2SMS_SENDER);\n\n    // Fast2SMS API call - using GET method as per documentation\n    const url = `https://www.fast2sms.com/dev/bulkV2?authorization=${FAST2SMS_API_KEY}&message=${encodeURIComponent(message)}&language=english&route=q&numbers=${cleanNumber}`;\n\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'User-Agent': 'Kanu-Portfolio/1.0'\n      }\n    });\n\n    const data = await response.json();\n    console.log(\"üì± Fast2SMS Response Status:\", response.status);\n    console.log(\"üì± Fast2SMS Response:\", JSON.stringify(data, null, 2));\n\n    if (response.ok && data.return === true) {\n      console.log(\"‚úÖ SMS sent via Fast2SMS:\", data.request_id);\n      return {\n        success: true,\n        messageId: data.request_id || `fast2sms_${Date.now()}`\n      };\n    } else {\n      console.error(\"‚ùå Fast2SMS error:\", data);\n      return {\n        success: false,\n        error: data.message || data.error || 'Fast2SMS API error'\n      };\n    }\n\n  } catch (error) {\n    console.error(\"‚ùå Fast2SMS SMS error:\", error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n}\n\n// Optional Twilio client (only if env is configured)\nlet twilioClient: any = null;\nif (process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN) {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const twilio = require(\"twilio\");\n    twilioClient = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);\n    console.log(\"‚úÖ Twilio configured for SMS sending\");\n  } catch (e) {\n    console.warn(\"Twilio package not installed or failed to initialize. Run `npm i twilio` if you want SMS sending.\");\n  }\n}\n\n// Exotel SMS sending function\nasync function sendSMSViaExotel(to: string, message: string): Promise<{ success: boolean; messageId?: string; error?: string }> {\n  try {\n    // Exotel API endpoint for SMS - using correct format\n    const url = `https://${EXOTEL_SUBDOMAIN}/v1/Accounts/${EXOTEL_SID}/Sms/send.json`;\n\n    // Basic authentication with API Key and Token\n    const auth = Buffer.from(`${EXOTEL_API_KEY}:${EXOTEL_API_TOKEN}`).toString('base64');\n\n    // Prepare form data with correct parameter names\n    const formData = new URLSearchParams({\n      'From': EXOTEL_FROM_NUMBER,\n      'To': to,\n      'Body': message,\n      'StatusCallback': 'https://webhook.site/your-webhook-url' // Optional callback URL\n    });\n\n    console.log(\"üì± Sending SMS via Exotel to:\", to);\n    console.log(\"üì± Exotel URL:\", url);\n    console.log(\"üì± Auth Key:\", EXOTEL_API_KEY.substring(0, 8) + \"...\");\n    console.log(\"üì± From Number:\", EXOTEL_FROM_NUMBER);\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Basic ${auth}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Accept': 'application/json',\n        'User-Agent': 'Kanu-Portfolio/1.0'\n      },\n      body: formData,\n    });\n\n    const responseText = await response.text();\n    console.log(\"üì± Exotel Response Status:\", response.status);\n    console.log(\"üì± Exotel Response:\", responseText);\n\n    let data;\n    try {\n      data = JSON.parse(responseText);\n    } catch (parseError) {\n      console.error(\"‚ùå Failed to parse Exotel response:\", parseError);\n      return {\n        success: false,\n        error: `Invalid response from Exotel: ${responseText}`\n      };\n    }\n\n    if (response.ok) {\n      // Check for successful response structure\n      if (data.Response && data.Response.SmsSid) {\n        console.log(\"‚úÖ SMS sent via Exotel:\", data.Response.SmsSid);\n        return {\n          success: true,\n          messageId: data.Response.SmsSid\n        };\n      } else if (data.RestException) {\n        console.error(\"‚ùå Exotel API error:\", data.RestException);\n        return {\n          success: false,\n          error: data.RestException.Message || 'Exotel API error'\n        };\n      } else {\n        console.error(\"‚ùå Unexpected Exotel response:\", data);\n        return {\n          success: false,\n          error: 'Unexpected response from Exotel API'\n        };\n      }\n    } else {\n      console.error(\"‚ùå Exotel HTTP error:\", response.status, data);\n      return {\n        success: false,\n        error: data.RestException?.Message || `HTTP ${response.status}: ${response.statusText}`\n      };\n    }\n  } catch (error) {\n    console.error(\"‚ùå Exotel SMS request error:\", error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n}\n\nconst router = express.Router();\n\n// Get all SMS notifications\nrouter.get(\"/notifications\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const notifications = await SMSNotification.find({ userId }).sort({\n      createdAt: -1,\n    });\n    res.json(notifications);\n  } catch (error) {\n    console.error(\"Error fetching SMS notifications:\", error);\n    res.status(500).json({ error: \"Failed to fetch SMS notifications\" });\n  }\n});\n\n// Create new SMS notification\nrouter.post(\"/notifications\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const notificationData = { ...req.body, userId };\n\n    const notification = new SMSNotification(notificationData);\n    await notification.save();\n\n    res.status(201).json(notification);\n  } catch (error) {\n    console.error(\"Error creating SMS notification:\", error);\n    res.status(500).json({ error: \"Failed to create SMS notification\" });\n  }\n});\n\n// Send a real SMS via Exotel (primary) or Twilio (fallback)\nrouter.post(\"/send\", async (req, res) => {\n  const userId = \"kanu-portfolio\";\n  const { to, message, category = \"Contact\" } = req.body as { to?: string; message?: string; category?: string };\n\n  if (!to || !message) {\n    return res.status(400).json({ error: \"'to' and 'message' are required\" });\n  }\n\n  try {\n    let smsResult: { success: boolean; messageId?: string; error?: string };\n    let provider = \"\";\n\n    // Try Fast2SMS first (primary provider)\n    console.log(\"üì± Attempting to send SMS via Fast2SMS...\");\n    smsResult = await sendSMSSimple(to, message);\n\n    if (smsResult.success) {\n      provider = \"Fast2SMS\";\n    } else {\n      console.log(\"‚ùå Fast2SMS failed:\", smsResult.error);\n      console.log(\"üì± Trying Exotel fallback...\");\n\n      // Try Exotel as fallback\n      const exotelResult = await sendSMSViaExotel(to, message);\n      if (exotelResult.success) {\n        smsResult = exotelResult;\n        provider = \"Exotel\";\n      } else {\n        console.log(\"‚ùå Exotel failed, trying Twilio fallback...\");\n\n        // Fallback to Twilio if available\n        if (twilioClient && process.env.TWILIO_FROM_NUMBER) {\n          try {\n            const twilioResponse = await twilioClient.messages.create({\n              body: message,\n              to,\n              from: process.env.TWILIO_FROM_NUMBER,\n            });\n\n            smsResult = {\n              success: true,\n              messageId: twilioResponse.sid\n            };\n            provider = \"Twilio\";\n          } catch (twilioError: any) {\n            smsResult = {\n              success: false,\n              error: `Fast2SMS: ${smsResult.error}, Exotel: ${exotelResult.error}, Twilio: ${twilioError.message}`\n            };\n          }\n        } else {\n          smsResult = {\n            success: false,\n            error: `All SMS providers failed. Fast2SMS: ${smsResult.error}, Exotel: ${exotelResult.error}`\n          };\n        }\n      }\n    }\n\n    // Save notification regardless of success/failure\n    const notification = new SMSNotification({\n      userId,\n      message,\n      phone: to,\n      category,\n      status: smsResult.success ? \"sent\" : \"failed\",\n      timestamp: new Date(),\n    });\n    await notification.save();\n\n    if (smsResult.success) {\n      return res.json({\n        success: true,\n        messageId: smsResult.messageId,\n        provider,\n        notification\n      });\n    } else {\n      return res.status(500).json({\n        success: false,\n        error: smsResult.error,\n        provider: provider || \"None\",\n        notification\n      });\n    }\n  } catch (error: any) {\n    console.error(\"Error in SMS send endpoint:\", error);\n\n    // Save failed notification\n    const notification = new SMSNotification({\n      userId,\n      message,\n      phone: to,\n      category,\n      status: \"failed\",\n      timestamp: new Date(),\n    });\n    await notification.save();\n\n    return res.status(500).json({\n      success: false,\n      error: error.message || \"Failed to send SMS\",\n      notification\n    });\n  }\n});\n\n// Update SMS notification\nrouter.put(\"/notifications/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const updateData = req.body;\n\n    const notification = await SMSNotification.findByIdAndUpdate(\n      id,\n      updateData,\n      { new: true },\n    );\n\n    if (!notification) {\n      return res.status(404).json({ error: \"SMS notification not found\" });\n    }\n\n    res.json(notification);\n  } catch (error) {\n    console.error(\"Error updating SMS notification:\", error);\n    res.status(500).json({ error: \"Failed to update SMS notification\" });\n  }\n});\n\n// Delete SMS notification\nrouter.delete(\"/notifications/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const notification = await SMSNotification.findByIdAndDelete(id);\n\n    if (!notification) {\n      return res.status(404).json({ error: \"SMS notification not found\" });\n    }\n\n    res.json({ message: \"SMS notification deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error deleting SMS notification:\", error);\n    res.status(500).json({ error: \"Failed to delete SMS notification\" });\n  }\n});\n\n// Clear all SMS notifications\nrouter.delete(\"/notifications\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    await SMSNotification.deleteMany({ userId });\n    res.json({ message: \"All SMS notifications cleared successfully\" });\n  } catch (error) {\n    console.error(\"Error clearing SMS notifications:\", error);\n    res.status(500).json({ error: \"Failed to clear SMS notifications\" });\n  }\n});\n\n// Get SMS categories\nrouter.get(\"/categories\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    let categories = await SMSCategory.findOne({ userId });\n\n    if (!categories) {\n      // Create default categories if doesn't exist\n      categories = new SMSCategory({\n        userId,\n        categories: [\"Contact\", \"Inquiry\", \"Support\", \"Urgent\"],\n      });\n      await categories.save();\n    }\n\n    res.json(categories.categories);\n  } catch (error) {\n    console.error(\"Error fetching SMS categories:\", error);\n    res.status(500).json({ error: \"Failed to fetch SMS categories\" });\n  }\n});\n\n// Update SMS categories\nrouter.put(\"/categories\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const { categories } = req.body;\n\n    const result = await SMSCategory.findOneAndUpdate(\n      { userId },\n      { categories },\n      { new: true, upsert: true },\n    );\n\n    res.json(result.categories);\n  } catch (error) {\n    console.error(\"Error updating SMS categories:\", error);\n    res.status(500).json({ error: \"Failed to update SMS categories\" });\n  }\n});\n\n// Get SMS provider status\nrouter.get(\"/status\", async (req, res) => {\n  try {\n    const fast2smsConfigured = true; // Fast2SMS is now configured\n    const exotelConfigured = !!(EXOTEL_API_KEY && EXOTEL_API_TOKEN && EXOTEL_SID && EXOTEL_FROM_NUMBER);\n    const twilioConfigured = !!(twilioClient && process.env.TWILIO_FROM_NUMBER);\n\n    const status = {\n      fast2sms: {\n        configured: fast2smsConfigured,\n        apiKey: \"‚úÖ Configured\",\n        sender: \"KANUPO\",\n        status: \"‚úÖ Ready\"\n      },\n      exotel: {\n        configured: exotelConfigured,\n        apiKey: EXOTEL_API_KEY ? \"‚úÖ Configured\" : \"‚ùå Not configured\",\n        apiToken: EXOTEL_API_TOKEN ? \"‚úÖ Configured\" : \"‚ùå Not configured\",\n        sid: EXOTEL_SID,\n        fromNumber: EXOTEL_FROM_NUMBER,\n      },\n      twilio: {\n        configured: twilioConfigured,\n        accountSid: process.env.TWILIO_ACCOUNT_SID ? \"‚úÖ Configured\" : \"‚ùå Not configured\",\n        authToken: process.env.TWILIO_AUTH_TOKEN ? \"‚úÖ Configured\" : \"‚ùå Not configured\",\n        fromNumber: process.env.TWILIO_FROM_NUMBER || \"‚ùå Not configured\",\n      },\n      primaryProvider: \"Fast2SMS\",\n      fallbackProvider: exotelConfigured ? \"Exotel\" : (twilioConfigured ? \"Twilio\" : \"None\"),\n    };\n\n    res.json(status);\n  } catch (error) {\n    console.error(\"Error getting SMS status:\", error);\n    res.status(500).json({ error: \"Failed to get SMS status\" });\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport { UserSettings } from \"../models/index.js\";\n\nconst router = express.Router();\n\n// Get user settings\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    let settings = await UserSettings.findOne({ userId });\n\n    if (!settings) {\n      // Create default settings if doesn't exist\n      settings = new UserSettings({ userId });\n      await settings.save();\n    }\n\n    res.json(settings);\n  } catch (error) {\n    console.error(\"Error fetching user settings:\", error);\n    res.status(500).json({ error: \"Failed to fetch user settings\" });\n  }\n});\n\n// Update user settings (site + notification)\nrouter.put(\"/\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const updateData = req.body;\n\n    const settings = await UserSettings.findOneAndUpdate(\n      { userId },\n      updateData,\n      { new: true, upsert: true },\n    );\n\n    res.json(settings);\n  } catch (error) {\n    console.error(\"Error updating user settings:\", error);\n    res.status(500).json({ error: \"Failed to update user settings\" });\n  }\n});\n\n// Update notification settings specifically\nrouter.put(\"/notifications\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const { notificationSettings } = req.body;\n\n    const settings = await UserSettings.findOneAndUpdate(\n      { userId },\n      { notificationSettings },\n      { new: true, upsert: true },\n    );\n\n    res.json(settings);\n  } catch (error) {\n    console.error(\"Error updating notification settings:\", error);\n    res.status(500).json({ error: \"Failed to update notification settings\" });\n  }\n});\n\n// Update site settings specifically\nrouter.put(\"/site\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const { siteSettings } = req.body;\n\n    const settings = await UserSettings.findOneAndUpdate(\n      { userId },\n      { siteSettings },\n      { new: true, upsert: true },\n    );\n\n    res.json(settings);\n  } catch (error) {\n    console.error(\"Error updating site settings:\", error);\n    res.status(500).json({ error: \"Failed to update site settings\" });\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport { Activity, Skill } from \"../models/index.js\";\n\nconst router = express.Router();\n\n// ACTIVITIES ROUTES\n\n// Get all activities\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const activities = await Activity.find({ userId }).sort({ createdAt: -1 });\n    res.json(activities);\n  } catch (error) {\n    console.error(\"Error fetching activities:\", error);\n    res.status(500).json({ error: \"Failed to fetch activities\" });\n  }\n});\n\n// Create new activity\nrouter.post(\"/\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const activityData = { ...req.body, userId };\n\n    const activity = new Activity(activityData);\n    await activity.save();\n\n    res.status(201).json(activity);\n  } catch (error) {\n    console.error(\"Error creating activity:\", error);\n    res.status(500).json({ error: \"Failed to create activity\" });\n  }\n});\n\n// Update activity\nrouter.put(\"/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const updateData = req.body;\n\n    const activity = await Activity.findByIdAndUpdate(id, updateData, {\n      new: true,\n    });\n\n    if (!activity) {\n      return res.status(404).json({ error: \"Activity not found\" });\n    }\n\n    res.json(activity);\n  } catch (error) {\n    console.error(\"Error updating activity:\", error);\n    res.status(500).json({ error: \"Failed to update activity\" });\n  }\n});\n\n// Delete activity\nrouter.delete(\"/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const activity = await Activity.findByIdAndDelete(id);\n\n    if (!activity) {\n      return res.status(404).json({ error: \"Activity not found\" });\n    }\n\n    res.json({ message: \"Activity deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error deleting activity:\", error);\n    res.status(500).json({ error: \"Failed to delete activity\" });\n  }\n});\n\n// SKILLS ROUTES\n\n// Get all skills\nrouter.get(\"/skills\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const skills = await Skill.find({ userId }).sort({ category: 1, name: 1 });\n    res.json(skills);\n  } catch (error) {\n    console.error(\"Error fetching skills:\", error);\n    res.status(500).json({ error: \"Failed to fetch skills\" });\n  }\n});\n\n// Create new skill\nrouter.post(\"/skills\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const skillData = { ...req.body, userId };\n\n    const skill = new Skill(skillData);\n    await skill.save();\n\n    res.status(201).json(skill);\n  } catch (error) {\n    console.error(\"Error creating skill:\", error);\n    res.status(500).json({ error: \"Failed to create skill\" });\n  }\n});\n\n// Update skill\nrouter.put(\"/skills/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const updateData = req.body;\n\n    const skill = await Skill.findByIdAndUpdate(id, updateData, { new: true });\n\n    if (!skill) {\n      return res.status(404).json({ error: \"Skill not found\" });\n    }\n\n    res.json(skill);\n  } catch (error) {\n    console.error(\"Error updating skill:\", error);\n    res.status(500).json({ error: \"Failed to update skill\" });\n  }\n});\n\n// Delete skill\nrouter.delete(\"/skills/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const skill = await Skill.findByIdAndDelete(id);\n\n    if (!skill) {\n      return res.status(404).json({ error: \"Skill not found\" });\n    }\n\n    res.json({ message: \"Skill deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error deleting skill:\", error);\n    res.status(500).json({ error: \"Failed to delete skill\" });\n  }\n});\n\nexport default router;\n","import { RequestHandler } from \"express\";\nimport { z } from \"zod\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { FileStorage } from \"../models/index.js\";\nimport { isMongoDBAvailable } from \"../database/connection.js\";\n\n// Validation schema for file upload (JSON base64)\nconst uploadSchema = z.object({\n  type: z.enum(['profile-image', 'project-image', 'document', 'resume']),\n  filename: z.string().optional(),\n  mimeType: z.string().optional(),\n  data: z.string().min(1, 'File data is required'), // base64 data URL or pure base64\n});\n\nexport interface UploadResponse {\n  success: boolean;\n  url?: string;\n  filename?: string;\n  message?: string;\n  error?: string;\n}\n\nfunction ensureUploadsDir(): string {\n  const uploadsDir = path.resolve(process.cwd(), \"public\", \"uploads\");\n  if (!fs.existsSync(uploadsDir)) {\n    fs.mkdirSync(uploadsDir, { recursive: true });\n  }\n  return uploadsDir;\n}\n\nfunction sanitizeFilename(name: string): string {\n  return name.replace(/[^a-zA-Z0-9._-]/g, \"_\");\n}\n\nfunction inferExtension(filename?: string, mimeType?: string): string {\n  if (filename && filename.includes('.')) return filename.split('.').pop() || '';\n  if (!mimeType) return '';\n  const map: Record<string, string> = {\n    'image/jpeg': 'jpg',\n    'image/jpg': 'jpg',\n    'image/png': 'png',\n    'image/webp': 'webp',\n    'application/pdf': 'pdf',\n    'application/msword': 'doc',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'docx',\n  };\n  return map[mimeType] || '';\n}\n\n// Handle file upload for profile images and other assets\nexport const handleFileUpload: RequestHandler = async (req, res) => {\n  try {\n    const { type, filename, mimeType, data } = uploadSchema.parse(req.body);\n    const userId = \"kanu-portfolio\"; // Default user ID\n\n    // Extract base64 payload (strip data URL prefix if present)\n    const base64 = data.includes(',') ? data.split(',')[1] : data;\n    const buffer = Buffer.from(base64, 'base64');\n\n    // Validate size (max 10MB)\n    const MAX = 10 * 1024 * 1024;\n    if (buffer.length > MAX) {\n      return res.status(413).json({ success: false, error: 'File too large (max 10MB)' });\n    }\n\n    // Validate type\n    const allowed = new Set([\n      'image/jpeg', 'image/jpg', 'image/png', 'image/webp',\n      'application/pdf', 'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    ]);\n    if (mimeType && !allowed.has(mimeType)) {\n      return res.status(400).json({ success: false, error: 'Unsupported file type' });\n    }\n\n    const uploadsDir = ensureUploadsDir();\n    const ext = inferExtension(filename, mimeType) || (type === 'document' ? 'pdf' : 'png');\n    const safeName = sanitizeFilename(filename || `${type}`);\n    const unique = `${Date.now()}-${Math.random().toString(36).slice(2, 8)}-${safeName}.${ext}`;\n    const filePath = path.join(uploadsDir, unique);\n\n    // Write file to filesystem (for immediate access)\n    fs.writeFileSync(filePath, buffer);\n\n    const publicUrl = `/uploads/${unique}`;\n    const absoluteUrl = `${req.protocol}://${req.get('host')}${publicUrl}`;\n\n    // Store file in MongoDB for persistence (if MongoDB is available)\n    if (isMongoDBAvailable()) {\n      try {\n        // Deactivate any existing files of the same type for this user\n        await FileStorage.updateMany(\n          { userId, fileType: type, isActive: true },\n          { isActive: false }\n        );\n\n        // Store new file in MongoDB\n        const fileRecord = new FileStorage({\n          userId,\n          filename: unique,\n          originalName: filename || `${type}.${ext}`,\n          mimeType: mimeType || 'application/octet-stream',\n          fileType: type,\n          fileSize: buffer.length,\n          fileData: buffer,\n          publicUrl: absoluteUrl,\n          isActive: true,\n          metadata: {\n            uploadedAt: new Date(),\n            serverHost: req.get('host'),\n            protocol: req.protocol\n          }\n        });\n\n        await fileRecord.save();\n        console.log(`‚úÖ File stored in MongoDB: ${unique} (${type})`);\n      } catch (mongoError) {\n        console.error('‚ùå MongoDB storage error:', mongoError);\n        // Continue with filesystem-only storage if MongoDB fails\n      }\n    }\n\n    const response: UploadResponse = {\n      success: true,\n      url: absoluteUrl,\n      filename: unique,\n      message: 'File uploaded successfully',\n    };\n\n    res.json(response);\n  } catch (error) {\n    console.error('Upload error:', error);\n\n    const errorResponse: UploadResponse = {\n      success: false,\n      error: error instanceof Error ? error.message : 'Upload failed'\n    };\n\n    res.status(400).json(errorResponse);\n  }\n};\n\n// Handle file deletion\nexport const handleFileDelete: RequestHandler = async (req, res) => {\n  try {\n    const { filename } = req.params;\n\n    if (!filename) {\n      return res.status(400).json({\n        success: false,\n        error: 'Filename is required'\n      });\n    }\n\n    const uploadsDir = ensureUploadsDir();\n    const filePath = path.join(uploadsDir, sanitizeFilename(filename));\n\n    if (fs.existsSync(filePath)) {\n      fs.unlinkSync(filePath);\n    }\n\n    const response: UploadResponse = {\n      success: true,\n      message: 'File deleted successfully'\n    };\n\n    res.json(response);\n  } catch (error) {\n    console.error('Delete error:', error);\n\n    const errorResponse: UploadResponse = {\n      success: false,\n      error: error instanceof Error ? error.message : 'Delete failed'\n    };\n\n    res.status(500).json(errorResponse);\n  }\n};\n\n// Get upload configuration\nexport const getUploadConfig: RequestHandler = (req, res) => {\n  const config = {\n    maxFileSize: 10 * 1024 * 1024, // 10MB\n    allowedTypes: [\n      'image/jpeg', 'image/jpg', 'image/png', 'image/webp',\n      'application/pdf', 'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    ],\n    uploadEndpoint: '/api/upload',\n    storageProvider: isMongoDBAvailable() ? 'mongodb-filesystem' : 'local-filesystem',\n  };\n\n  res.json(config);\n};\n\n// Restore files from MongoDB to filesystem (called on server startup)\nexport const restoreFilesFromMongoDB: RequestHandler = async (req, res) => {\n  try {\n    if (!isMongoDBAvailable()) {\n      return res.json({\n        success: false,\n        message: 'MongoDB not available',\n        restoredCount: 0\n      });\n    }\n\n    const userId = \"kanu-portfolio\";\n    const uploadsDir = ensureUploadsDir();\n\n    // Get all active files from MongoDB\n    const files = await FileStorage.find({ userId, isActive: true });\n\n    let restoredCount = 0;\n    let skippedCount = 0;\n\n    for (const file of files) {\n      const filePath = path.join(uploadsDir, file.filename);\n\n      // Check if file already exists in filesystem\n      if (fs.existsSync(filePath)) {\n        skippedCount++;\n        continue;\n      }\n\n      try {\n        // Restore file from MongoDB to filesystem\n        fs.writeFileSync(filePath, file.fileData);\n        restoredCount++;\n        console.log(`‚úÖ Restored file: ${file.filename}`);\n      } catch (error) {\n        console.error(`‚ùå Failed to restore file ${file.filename}:`, error);\n      }\n    }\n\n    res.json({\n      success: true,\n      message: `File restoration completed`,\n      restoredCount,\n      skippedCount,\n      totalFiles: files.length\n    });\n\n  } catch (error) {\n    console.error('‚ùå File restoration error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to restore files',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n};\n\n// Get file from MongoDB (for serving files that might be missing from filesystem)\nexport const getFileFromMongoDB: RequestHandler = async (req, res) => {\n  try {\n    const { filename } = req.params;\n    const userId = \"kanu-portfolio\";\n\n    if (!isMongoDBAvailable()) {\n      return res.status(503).json({\n        success: false,\n        error: 'MongoDB not available'\n      });\n    }\n\n    const file = await FileStorage.findOne({\n      userId,\n      filename,\n      isActive: true\n    });\n\n    if (!file) {\n      return res.status(404).json({\n        success: false,\n        error: 'File not found'\n      });\n    }\n\n    // Set appropriate headers\n    res.set({\n      'Content-Type': file.mimeType,\n      'Content-Length': file.fileSize.toString(),\n      'Cache-Control': 'public, max-age=31536000', // 1 year cache\n    });\n\n    // Send file data\n    res.send(file.fileData);\n\n  } catch (error) {\n    console.error('‚ùå Get file from MongoDB error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to retrieve file',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n};\n","import express from \"express\";\nimport nodemailer from \"nodemailer\";\n\nconst router = express.Router();\n\n// Send email using Nodemailer (supports SMTP via env, or fallback to JSON transport)\nrouter.post(\"/send-email\", async (req, res) => {\n  const { name, email, phone, subject, message } = req.body as {\n    name?: string;\n    email?: string;\n    phone?: string;\n    subject?: string;\n    message?: string;\n  };\n\n  if (!name || !email || !message) {\n    return res.status(400).json({\n      error: \"Missing required fields\",\n      details: \"Name, email, and message are required\",\n    });\n  }\n\n  const toAddress = process.env.NOTIFY_EMAIL_TO || \"kanuprajapati717@gmail.com\";\n\n  try {\n    let transporter: nodemailer.Transporter;\n    if (\n      process.env.SMTP_HOST &&\n      process.env.SMTP_PORT &&\n      process.env.SMTP_USER &&\n      process.env.SMTP_PASS\n    ) {\n      transporter = nodemailer.createTransport({\n        host: process.env.SMTP_HOST,\n        port: Number(process.env.SMTP_PORT),\n        secure: Number(process.env.SMTP_PORT) === 465,\n        auth: {\n          user: process.env.SMTP_USER,\n          pass: process.env.SMTP_PASS,\n        },\n      });\n    } else {\n      // Dev fallback: log-only transport\n      transporter = nodemailer.createTransport({\n        jsonTransport: true,\n      } as any);\n    }\n\n    const mailOptions = {\n      from: process.env.SMTP_FROM || `\"Portfolio\" <no-reply@localhost>`,\n      to: toAddress,\n      subject: subject || \"Contact Form Submission\",\n      text: `From: ${name} (${email})\\nPhone: ${phone || \"-\"}\\n\\n${message}`,\n      html: `<p><strong>From:</strong> ${name} (${email})</p><p><strong>Phone:</strong> ${phone || \"-\"}</p><p>${message}</p>`,\n    };\n\n    const info = await transporter.sendMail(mailOptions);\n    return res.json({ success: true, messageId: info.messageId || undefined });\n  } catch (error: any) {\n    console.error(\"Email send error:\", error);\n    return res.status(500).json({ success: false, error: error.message || \"Failed to send email\" });\n  }\n});\n\nexport default router;\n","import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo.js\";\nimport { connectDB, isMongoDBAvailable, getConnectionStatus } from \"./database/connection.js\";\nimport profileRoutes from \"./routes/profile.js\";\nimport projectsRoutes from \"./routes/projects.js\";\nimport contactsRoutes from \"./routes/contacts.js\";\nimport gitRoutes from \"./routes/git.js\";\nimport migrateRoutes from \"./routes/migrate.js\";\nimport emailTestRoutes from \"./routes/email-test.js\";\nimport smsRoutes from \"./routes/sms.js\";\nimport settingsRoutes from \"./routes/settings.js\";\nimport activitiesRoutes from \"./routes/activities.js\";\nimport { handleFileUpload, handleFileDelete, getUploadConfig, restoreFilesFromMongoDB, getFileFromMongoDB } from \"./routes/upload.js\";\nimport emailTestRoutes from \"./routes/email-test.js\";\nimport path from \"path\";\n\nexport function createServer() {\n  const app = express();\n\n  // Try to connect to MongoDB (non-blocking)\n  connectDB()\n    .then(async (connected) => {\n      if (connected) {\n        console.log(\"‚úÖ MongoDB integration enabled\");\n\n        // Restore files from MongoDB to filesystem on startup\n        try {\n          const { restoreFilesFromMongoDB } = await import(\"./routes/upload.js\");\n          const mockReq = {} as any;\n          const mockRes = {\n            json: (data: any) => {\n              if (data.success) {\n                console.log(`üìÅ File restoration: ${data.restoredCount} files restored, ${data.skippedCount} skipped`);\n              }\n            }\n          } as any;\n\n          await restoreFilesFromMongoDB(mockReq, mockRes);\n        } catch (error) {\n          console.warn(\"File restoration failed:\", error);\n        }\n      } else {\n        console.log(\"üì± Running in localStorage mode\");\n      }\n    })\n    .catch((error) => {\n      console.warn(\"MongoDB connection attempt failed:\", error.message);\n    });\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json({ limit: \"10mb\" }));\n  app.use(express.urlencoded({ extended: true, limit: \"10mb\" }));\n\n  // Request logging middleware\n  app.use((req, res, next) => {\n    console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);\n    next();\n  });\n\n  // Health check endpoint with detailed MongoDB status\n  app.get(\"/api/health\", async (_req, res) => {\n    try {\n      const mongoStatus = getConnectionStatus();\n      const healthData = {\n        status: \"ok\",\n        timestamp: new Date().toISOString(),\n        mongodb: mongoStatus,\n        environment: process.env.NODE_ENV || \"development\",\n        uptime: process.uptime(),\n        memory: process.memoryUsage(),\n        version: process.version\n      };\n\n      res.json(healthData);\n    } catch (error) {\n      res.status(500).json({\n        status: \"error\",\n        message: \"Health check failed\",\n        error: error.message\n      });\n    }\n  });\n\n  // MongoDB status endpoint\n  app.get(\"/api/mongodb/status\", (_req, res) => {\n    try {\n      const status = getConnectionStatus();\n      res.json(status);\n    } catch (error) {\n      res.status(500).json({\n        error: \"Failed to get MongoDB status\",\n        message: error.message\n      });\n    }\n  });\n\n  // Test MongoDB connection endpoint\n  app.post(\"/api/mongodb/test\", async (_req, res) => {\n    try {\n      if (isMongoDBAvailable()) {\n        res.json({\n          success: true,\n          message: \"MongoDB connection is working\",\n          status: \"connected\"\n        });\n      } else {\n        res.status(503).json({\n          success: false,\n          message: \"MongoDB is not available\",\n          status: \"disconnected\"\n        });\n      }\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        error: \"Failed to test MongoDB connection\",\n        message: error.message\n      });\n    }\n  });\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    const ping = process.env.PING_MESSAGE ?? \"pong\";\n    res.json({\n      message: ping,\n      timestamp: new Date().toISOString(),\n      mongodb: isMongoDBAvailable() ? \"connected\" : \"disconnected\"\n    });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n\n  // Portfolio API routes\n  app.use(\"/api/profile\", profileRoutes);\n  app.use(\"/api/projects\", projectsRoutes);\n  app.use(\"/api/contacts\", contactsRoutes);\n  app.use(\"/api/git\", gitRoutes);\n  app.use(\"/api/migrate\", migrateRoutes);\n  app.use(\"/api/sms\", smsRoutes);\n  app.use(\"/api/settings\", settingsRoutes);\n  app.use(\"/api/activities\", activitiesRoutes);\n  app.use(\"/api\", emailTestRoutes); // Email send endpoint\n\n  // File upload endpoints\n  app.post(\"/api/upload\", handleFileUpload);\n  app.delete(\"/api/upload/:filename\", handleFileDelete);\n  app.get(\"/api/upload/config\", getUploadConfig);\n  app.post(\"/api/upload/restore\", restoreFilesFromMongoDB);\n  app.get(\"/api/files/:filename\", getFileFromMongoDB);\n\n  // Serve uploaded files (with fallback to MongoDB)\n  app.use(\"/uploads\", express.static(path.resolve(process.cwd(), \"public\", \"uploads\")));\n\n  // Fallback middleware for missing files - serve from MongoDB\n  app.use(\"/uploads/*\", async (req, res, next) => {\n    if (isMongoDBAvailable()) {\n      try {\n        const filename = req.path.split('/').pop();\n        const { getFileFromMongoDB } = await import(\"./routes/upload.js\");\n\n        // Mock request with filename parameter\n        const mockReq = { params: { filename } } as any;\n        const mockRes = {\n          status: (code: number) => ({\n            json: (data: any) => res.status(code).json(data)\n          }),\n          set: (headers: any) => res.set(headers),\n          send: (data: any) => res.send(data)\n        } as any;\n\n        await getFileFromMongoDB(mockReq, mockRes);\n      } catch (error) {\n        next(); // Continue to 404 handler if file not found in MongoDB\n      }\n    } else {\n      next(); // Continue to 404 handler if MongoDB not available\n    }\n  });\n\n  // Global error handling middleware\n  app.use((error: any, req: express.Request, res: express.Response, next: express.NextFunction) => {\n    console.error('Global error handler:', error);\n\n    if (error.name === 'ValidationError') {\n      return res.status(400).json({\n        error: 'Validation Error',\n        message: error.message,\n        details: error.errors\n      });\n    }\n\n    if (error.name === 'CastError') {\n      return res.status(400).json({\n        error: 'Invalid ID Format',\n        message: 'The provided ID is not valid'\n      });\n    }\n\n    if (error.name === 'MongoError' && error.code === 11000) {\n      return res.status(409).json({\n        error: 'Duplicate Entry',\n        message: 'A record with this information already exists'\n      });\n    }\n\n    res.status(500).json({\n      error: 'Internal Server Error',\n      message: process.env.NODE_ENV === 'development' ? error.message : 'Something went wrong'\n    });\n  });\n\n  // 404 handler for undefined API routes only (do not intercept SPA routes)\n  app.use(\"/api/*\", (req, res) => {\n    res.status(404).json({\n      error: \"Route not found\",\n      message: `The route ${req.originalUrl} does not exist`,\n      availableRoutes: [\n        \"/api/health\",\n        \"/api/mongodb/status\",\n        \"/api/mongodb/test\",\n        \"/api/ping\",\n        \"/api/demo\",\n        \"/api/profile\",\n        \"/api/projects\",\n        \"/api/contacts\",\n        \"/api/git\",\n        \"/api/migrate\",\n        \"/api/sms\",\n        \"/api/settings\",\n        \"/api/activities\",\n        \"/api/upload\"\n      ]\n    });\n  });\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`üöÄ Fusion Starter server running on port ${port}`);\n  console.log(`üì± Frontend: http://localhost:${port}`);\n  console.log(`üîß API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"üõë Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"üõë Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["router","express","checkMongoDB","app","restoreFilesFromMongoDB","profileRoutes","projectsRoutes","contactsRoutes","gitRoutes","migrateRoutes","smsRoutes","settingsRoutes","activitiesRoutes","emailTestRoutes","getFileFromMongoDB"],"mappings":"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"}