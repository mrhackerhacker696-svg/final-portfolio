{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/database/connection.ts","../../server/models/index.ts","../../server/routes/profile.ts","../../server/routes/projects.ts","../../server/routes/contacts.ts","../../server/routes/git.ts","../../server/routes/migrate.ts","../../server/routes/email-test.ts","../../server/routes/sms.ts","../../server/routes/settings.ts","../../server/routes/activities.ts","../../server/routes/upload.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import mongoose from \"mongoose\";\nimport dotenv from \"dotenv\";\n\ndotenv.config();\n\nconst MONGODB_URI =\n  process.env.MONGODB_URI || \"mongodb://localhost:27017/portfolio\";\nconst ENABLE_MONGODB = process.env.ENABLE_MONGODB !== \"false\";\n\nlet isConnected = false;\n\nexport const connectDB = async () => {\n  if (isConnected) {\n    console.log(\"MongoDB already connected\");\n    return true;\n  }\n\n  if (!ENABLE_MONGODB) {\n    console.log(\"MongoDB disabled - running in localStorage mode\");\n    return false;\n  }\n\n  try {\n    await mongoose.connect(MONGODB_URI, {\n      serverSelectionTimeoutMS: 5000, // Timeout after 5s instead of 30s\n    });\n    isConnected = true;\n    console.log(\"MongoDB connected successfully\");\n    return true;\n  } catch (error) {\n    console.warn(\n      \"MongoDB connection failed - falling back to localStorage mode:\",\n      error.message,\n    );\n    return false;\n  }\n};\n\nexport const disconnectDB = async () => {\n  if (!isConnected) {\n    return;\n  }\n\n  try {\n    await mongoose.disconnect();\n    isConnected = false;\n    console.log(\"MongoDB disconnected\");\n  } catch (error) {\n    console.error(\"MongoDB disconnection error:\", error);\n  }\n};\n\nexport const isMongoDBAvailable = () => {\n  if (!ENABLE_MONGODB) {\n    return false;\n  }\n  return isConnected && mongoose.connection.readyState === 1;\n};\n\n// Handle process termination\nprocess.on(\"SIGINT\", disconnectDB);\nprocess.on(\"SIGTERM\", disconnectDB);\n","import mongoose from \"mongoose\";\n\n// Profile Schema\nconst ProfileSchema = new mongoose.Schema(\n  {\n    userId: { type: String, required: true, unique: true },\n    profileImage: {\n      type: String,\n      default:\n        \"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=400&h=400&fit=crop&crop=face\",\n    },\n    logoText: { type: String, default: \"⚡ logo\" },\n    resumeUrl: { type: String, default: \"\" },\n    contactInfo: {\n      email: { type: String, default: \"kanuprajapati717@gmail.com\" },\n      phone: { type: String, default: \"+91 9876543210\" },\n      location: { type: String, default: \"Gujarat, India\" },\n      linkedin: {\n        type: String,\n        default: \"https://linkedin.com/in/kanuprajapati\",\n      },\n      github: { type: String, default: \"https://github.com/kanuprajapati\" },\n    },\n  },\n  { timestamps: true },\n);\n\n// Project Schema\nconst ProjectSchema = new mongoose.Schema(\n  {\n    userId: { type: String, required: true },\n    title: { type: String, required: true },\n    description: { type: String, required: true },\n    fullDescription: { type: String, default: \"\" },\n    tags: [{ type: String }],\n    image: { type: String, required: true },\n    status: {\n      type: String,\n      enum: [\"In Development\", \"Completed\", \"Live\", \"Published\"],\n      default: \"In Development\",\n    },\n    dateCompleted: { type: String, default: \"\" },\n    links: {\n      github: { type: String, default: \"\" },\n      demo: { type: String, default: \"\" },\n      live: { type: String, default: \"\" },\n    },\n    screenshots: [{ type: String }],\n    challenges: { type: String, default: \"\" },\n    outcome: { type: String, default: \"\" },\n  },\n  { timestamps: true },\n);\n\n// Contact Message Schema\nconst ContactMessageSchema = new mongoose.Schema(\n  {\n    userId: { type: String, required: true },\n    name: { type: String, required: true },\n    email: { type: String, required: true },\n    phone: { type: String, default: \"\" },\n    subject: { type: String, required: true },\n    message: { type: String, required: true },\n    contactMethod: {\n      type: String,\n      enum: [\"email\", \"sms\", \"call\"],\n      default: \"email\",\n    },\n    status: { type: String, enum: [\"new\", \"replied\"], default: \"new\" },\n    date: {\n      type: String,\n      default: () => new Date().toISOString().split(\"T\")[0],\n    },\n  },\n  { timestamps: true },\n);\n\n// Git Settings Schema\nconst GitSettingsSchema = new mongoose.Schema(\n  {\n    userId: { type: String, required: true, unique: true },\n    username: { type: String, default: \"kanuprajapati\" },\n    accessToken: { type: String, default: \"\" },\n    isConnected: { type: Boolean, default: true },\n  },\n  { timestamps: true },\n);\n\n// Project Screenshots Schema (for additional screenshots)\nconst ProjectScreenshotSchema = new mongoose.Schema(\n  {\n    userId: { type: String, required: true },\n    projectId: { type: String, required: true },\n    screenshots: [{ type: String }],\n  },\n  { timestamps: true },\n);\n\n// SMS Notification Schema\nconst SMSNotificationSchema = new mongoose.Schema(\n  {\n    userId: { type: String, required: true },\n    message: { type: String, required: true },\n    phone: { type: String, required: true },\n    category: { type: String, default: \"Contact\" },\n    status: { type: String, enum: [\"sent\", \"pending\", \"failed\"], default: \"sent\" },\n    timestamp: { type: Date, default: Date.now },\n  },\n  { timestamps: true },\n);\n\n// SMS Categories Schema\nconst SMSCategorySchema = new mongoose.Schema(\n  {\n    userId: { type: String, required: true },\n    categories: [{ type: String }],\n  },\n  { timestamps: true },\n);\n\n// User Settings Schema\nconst UserSettingsSchema = new mongoose.Schema(\n  {\n    userId: { type: String, required: true, unique: true },\n    notificationSettings: {\n      emailNotifications: { type: Boolean, default: true },\n      smsNotifications: { type: Boolean, default: false },\n      pushNotifications: { type: Boolean, default: true },\n      emailOnNewMessage: { type: Boolean, default: true },\n      smsOnUrgent: { type: Boolean, default: false },\n    },\n    theme: { type: String, enum: [\"light\", \"dark\", \"system\"], default: \"system\" },\n    language: { type: String, default: \"en\" },\n  },\n  { timestamps: true },\n);\n\n// Activities Schema\nconst ActivitySchema = new mongoose.Schema(\n  {\n    userId: { type: String, required: true },\n    title: { type: String, required: true },\n    description: { type: String, required: true },\n    type: {\n      type: String,\n      enum: [\"project\", \"skill\", \"achievement\", \"education\", \"work\"],\n      default: \"project\",\n    },\n    date: { type: String, required: true },\n    icon: { type: String, default: \"📋\" },\n    category: { type: String, default: \"General\" },\n  },\n  { timestamps: true },\n);\n\n// Skills Schema\nconst SkillSchema = new mongoose.Schema(\n  {\n    userId: { type: String, required: true },\n    name: { type: String, required: true },\n    category: { type: String, required: true },\n    level: { type: Number, min: 1, max: 100, default: 50 },\n    years: { type: Number, default: 1 },\n    icon: { type: String, default: \"⚡\" },\n  },\n  { timestamps: true },\n);\n\n// Export models\nexport const Profile = mongoose.model(\"Profile\", ProfileSchema);\nexport const Project = mongoose.model(\"Project\", ProjectSchema);\nexport const ContactMessage = mongoose.model(\n  \"ContactMessage\",\n  ContactMessageSchema,\n);\nexport const GitSettings = mongoose.model(\"GitSettings\", GitSettingsSchema);\nexport const ProjectScreenshot = mongoose.model(\n  \"ProjectScreenshot\",\n  ProjectScreenshotSchema,\n);\nexport const SMSNotification = mongoose.model(\n  \"SMSNotification\",\n  SMSNotificationSchema,\n);\nexport const SMSCategory = mongoose.model(\"SMSCategory\", SMSCategorySchema);\nexport const UserSettings = mongoose.model(\"UserSettings\", UserSettingsSchema);\nexport const Activity = mongoose.model(\"Activity\", ActivitySchema);\nexport const Skill = mongoose.model(\"Skill\", SkillSchema);\n","import express from \"express\";\nimport { Profile } from \"../models/index.js\";\nimport { isMongoDBAvailable } from \"../database/connection.js\";\n\nconst router = express.Router();\n\n// Get profile\nrouter.get(\"/\", async (req, res) => {\n  try {\n    if (!isMongoDBAvailable()) {\n      return res.status(503).json({\n        error: \"MongoDB not available\",\n        message: \"Please use localStorage or set up MongoDB connection\",\n      });\n    }\n\n    const userId = \"kanu-portfolio\"; // Default user ID\n    let profile = await Profile.findOne({ userId });\n\n    if (!profile) {\n      // Create default profile if doesn't exist\n      profile = new Profile({ userId });\n      await profile.save();\n    }\n\n    res.json(profile);\n  } catch (error) {\n    console.error(\"Error fetching profile:\", error);\n    res.status(500).json({ error: \"Failed to fetch profile\" });\n  }\n});\n\n// Update profile\nrouter.put(\"/\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const updateData = req.body;\n\n    const profile = await Profile.findOneAndUpdate({ userId }, updateData, {\n      new: true,\n      upsert: true,\n    });\n\n    res.json(profile);\n  } catch (error) {\n    console.error(\"Error updating profile:\", error);\n    res.status(500).json({ error: \"Failed to update profile\" });\n  }\n});\n\n// Update profile image\nrouter.put(\"/image\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const { profileImage } = req.body;\n\n    const profile = await Profile.findOneAndUpdate(\n      { userId },\n      { profileImage },\n      { new: true, upsert: true },\n    );\n\n    res.json(profile);\n  } catch (error) {\n    console.error(\"Error updating profile image:\", error);\n    res.status(500).json({ error: \"Failed to update profile image\" });\n  }\n});\n\n// Update logo\nrouter.put(\"/logo\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const { logoText } = req.body;\n\n    const profile = await Profile.findOneAndUpdate(\n      { userId },\n      { logoText },\n      { new: true, upsert: true },\n    );\n\n    res.json(profile);\n  } catch (error) {\n    console.error(\"Error updating logo:\", error);\n    res.status(500).json({ error: \"Failed to update logo\" });\n  }\n});\n\n// Update resume URL\nrouter.put(\"/resume\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const { resumeUrl } = req.body;\n\n    const profile = await Profile.findOneAndUpdate(\n      { userId },\n      { resumeUrl },\n      { new: true, upsert: true },\n    );\n\n    res.json(profile);\n  } catch (error) {\n    console.error(\"Error updating resume:\", error);\n    res.status(500).json({ error: \"Failed to update resume\" });\n  }\n});\n\n// Update contact info\nrouter.put(\"/contact\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const { contactInfo } = req.body;\n\n    const profile = await Profile.findOneAndUpdate(\n      { userId },\n      { contactInfo },\n      { new: true, upsert: true },\n    );\n\n    res.json(profile);\n  } catch (error) {\n    console.error(\"Error updating contact info:\", error);\n    res.status(500).json({ error: \"Failed to update contact info\" });\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport { Project } from \"../models/index.js\";\n\nconst router = express.Router();\n\n// Get all projects\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const projects = await Project.find({ userId }).sort({ createdAt: -1 });\n    res.json(projects);\n  } catch (error) {\n    console.error(\"Error fetching projects:\", error);\n    res.status(500).json({ error: \"Failed to fetch projects\" });\n  }\n});\n\n// Get project by ID\nrouter.get(\"/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const project = await Project.findById(id);\n\n    if (!project) {\n      return res.status(404).json({ error: \"Project not found\" });\n    }\n\n    res.json(project);\n  } catch (error) {\n    console.error(\"Error fetching project:\", error);\n    res.status(500).json({ error: \"Failed to fetch project\" });\n  }\n});\n\n// Create new project\nrouter.post(\"/\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const projectData = { ...req.body, userId };\n\n    // Set default values for missing fields\n    if (!projectData.fullDescription) {\n      projectData.fullDescription = `This is a project developed with modern web technologies.\n\nKey Features:\n• Modern and responsive design\n• Clean and efficient code structure\n• User-friendly interface\n• Cross-platform compatibility\n\nTechnical Implementation:\nBuilt using industry-standard technologies and best practices to ensure optimal performance and maintainability.`;\n    }\n\n    if (!projectData.challenges) {\n      projectData.challenges =\n        \"Developing a robust and scalable solution while maintaining clean code architecture and ensuring optimal user experience.\";\n    }\n\n    if (!projectData.outcome) {\n      projectData.outcome =\n        \"Successfully delivered a high-quality project that meets all requirements and provides excellent user experience.\";\n    }\n\n    if (!projectData.screenshots) {\n      projectData.screenshots = [\n        projectData.image,\n        projectData.image,\n        projectData.image,\n      ];\n    }\n\n    if (!projectData.dateCompleted) {\n      projectData.dateCompleted = new Date().toISOString().split(\"T\")[0];\n    }\n\n    const project = new Project(projectData);\n    await project.save();\n\n    res.status(201).json(project);\n  } catch (error) {\n    console.error(\"Error creating project:\", error);\n    res.status(500).json({ error: \"Failed to create project\" });\n  }\n});\n\n// Update project\nrouter.put(\"/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const updateData = req.body;\n\n    const project = await Project.findByIdAndUpdate(id, updateData, {\n      new: true,\n    });\n\n    if (!project) {\n      return res.status(404).json({ error: \"Project not found\" });\n    }\n\n    res.json(project);\n  } catch (error) {\n    console.error(\"Error updating project:\", error);\n    res.status(500).json({ error: \"Failed to update project\" });\n  }\n});\n\n// Delete project\nrouter.delete(\"/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const project = await Project.findByIdAndDelete(id);\n\n    if (!project) {\n      return res.status(404).json({ error: \"Project not found\" });\n    }\n\n    res.json({ message: \"Project deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error deleting project:\", error);\n    res.status(500).json({ error: \"Failed to delete project\" });\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport { ContactMessage } from \"../models/index.js\";\n\nconst router = express.Router();\n\n// Get all contact messages\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const messages = await ContactMessage.find({ userId }).sort({\n      createdAt: -1,\n    });\n    res.json(messages);\n  } catch (error) {\n    console.error(\"Error fetching contact messages:\", error);\n    res.status(500).json({ error: \"Failed to fetch contact messages\" });\n  }\n});\n\n// Create new contact message\nrouter.post(\"/\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const messageData = { ...req.body, userId };\n\n    const message = new ContactMessage(messageData);\n    await message.save();\n\n    res.status(201).json(message);\n  } catch (error) {\n    console.error(\"Error creating contact message:\", error);\n    res.status(500).json({ error: \"Failed to create contact message\" });\n  }\n});\n\n// Update contact message status\nrouter.put(\"/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { status } = req.body;\n\n    const message = await ContactMessage.findByIdAndUpdate(\n      id,\n      { status },\n      { new: true },\n    );\n\n    if (!message) {\n      return res.status(404).json({ error: \"Contact message not found\" });\n    }\n\n    res.json(message);\n  } catch (error) {\n    console.error(\"Error updating contact message:\", error);\n    res.status(500).json({ error: \"Failed to update contact message\" });\n  }\n});\n\n// Delete contact message\nrouter.delete(\"/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const message = await ContactMessage.findByIdAndDelete(id);\n\n    if (!message) {\n      return res.status(404).json({ error: \"Contact message not found\" });\n    }\n\n    res.json({ message: \"Contact message deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error deleting contact message:\", error);\n    res.status(500).json({ error: \"Failed to delete contact message\" });\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport { GitSettings } from \"../models/index.js\";\n\nconst router = express.Router();\n\n// Get git settings\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    let settings = await GitSettings.findOne({ userId });\n\n    if (!settings) {\n      // Create default settings if doesn't exist\n      settings = new GitSettings({ userId });\n      await settings.save();\n    }\n\n    res.json(settings);\n  } catch (error) {\n    console.error(\"Error fetching git settings:\", error);\n    res.status(500).json({ error: \"Failed to fetch git settings\" });\n  }\n});\n\n// Update git settings\nrouter.put(\"/\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const updateData = req.body;\n\n    const settings = await GitSettings.findOneAndUpdate(\n      { userId },\n      updateData,\n      { new: true, upsert: true },\n    );\n\n    res.json(settings);\n  } catch (error) {\n    console.error(\"Error updating git settings:\", error);\n    res.status(500).json({ error: \"Failed to update git settings\" });\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport {\n  Profile,\n  Project,\n  ContactMessage,\n  GitSettings,\n} from \"../models/index.js\";\nimport { isMongoDBAvailable } from \"../database/connection.js\";\n\nconst router = express.Router();\n\n// Migrate data from localStorage to MongoDB\nrouter.post(\"/migrate\", async (req, res) => {\n  try {\n    if (!isMongoDBAvailable()) {\n      return res.status(503).json({\n        success: false,\n        error: \"MongoDB not available\",\n        message:\n          \"MongoDB is not connected. Please set up MongoDB and set ENABLE_MONGODB=true to use migration.\",\n        mongodbAvailable: false,\n      });\n    }\n\n    const { localStorageData } = req.body;\n    const userId = \"kanu-portfolio\";\n\n    const migrationResults = {\n      profile: null,\n      projects: [],\n      contacts: [],\n      gitSettings: null,\n      errors: [],\n    };\n\n    // Migrate profile data\n    if (localStorageData.profileData) {\n      try {\n        const profileData = JSON.parse(localStorageData.profileData);\n        const profile = await Profile.findOneAndUpdate(\n          { userId },\n          { ...profileData, userId },\n          { new: true, upsert: true },\n        );\n        migrationResults.profile = profile;\n      } catch (error) {\n        migrationResults.errors.push(\n          \"Failed to migrate profile data: \" + error.message,\n        );\n      }\n    }\n\n    // Migrate projects data\n    if (localStorageData.adminProjects) {\n      try {\n        const projectsData = JSON.parse(localStorageData.adminProjects);\n        for (const projectData of projectsData) {\n          // Check if project already exists\n          const existingProject = await Project.findOne({\n            userId,\n            title: projectData.title,\n          });\n\n          if (!existingProject) {\n            const project = new Project({\n              ...projectData,\n              userId,\n              fullDescription:\n                projectData.fullDescription ||\n                `This is a project developed with modern web technologies.\n\nKey Features:\n• Modern and responsive design\n• Clean and efficient code structure\n• User-friendly interface\n• Cross-platform compatibility\n\nTechnical Implementation:\nBuilt using industry-standard technologies and best practices to ensure optimal performance and maintainability.`,\n              challenges:\n                projectData.challenges ||\n                \"Developing a robust and scalable solution while maintaining clean code architecture and ensuring optimal user experience.\",\n              outcome:\n                projectData.outcome ||\n                \"Successfully delivered a high-quality project that meets all requirements and provides excellent user experience.\",\n              screenshots: projectData.screenshots || [\n                projectData.image,\n                projectData.image,\n                projectData.image,\n              ],\n              dateCompleted:\n                projectData.dateCompleted ||\n                new Date().toISOString().split(\"T\")[0],\n            });\n            await project.save();\n            migrationResults.projects.push(project);\n          }\n        }\n      } catch (error) {\n        migrationResults.errors.push(\n          \"Failed to migrate projects data: \" + error.message,\n        );\n      }\n    }\n\n    // Migrate contact messages\n    if (localStorageData.contactMessages) {\n      try {\n        const contactsData = JSON.parse(localStorageData.contactMessages);\n        for (const contactData of contactsData) {\n          // Check if message already exists\n          const existingMessage = await ContactMessage.findOne({\n            userId,\n            name: contactData.name,\n            email: contactData.email,\n            subject: contactData.subject,\n          });\n\n          if (!existingMessage) {\n            const message = new ContactMessage({\n              ...contactData,\n              userId,\n            });\n            await message.save();\n            migrationResults.contacts.push(message);\n          }\n        }\n      } catch (error) {\n        migrationResults.errors.push(\n          \"Failed to migrate contact messages: \" + error.message,\n        );\n      }\n    }\n\n    // Migrate git settings\n    if (localStorageData.gitSettings) {\n      try {\n        const gitData = JSON.parse(localStorageData.gitSettings);\n        const gitSettings = await GitSettings.findOneAndUpdate(\n          { userId },\n          { ...gitData, userId },\n          { new: true, upsert: true },\n        );\n        migrationResults.gitSettings = gitSettings;\n      } catch (error) {\n        migrationResults.errors.push(\n          \"Failed to migrate git settings: \" + error.message,\n        );\n      }\n    }\n\n    res.json({\n      success: true,\n      message: \"Data migration completed\",\n      results: migrationResults,\n    });\n  } catch (error) {\n    console.error(\"Migration error:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"Failed to migrate data\",\n      details: error.message,\n    });\n  }\n});\n\n// Get migration status\nrouter.get(\"/status\", async (req, res) => {\n  try {\n    if (!isMongoDBAvailable()) {\n      return res.json({\n        hasProfile: false,\n        projectsCount: 0,\n        contactsCount: 0,\n        hasGitSettings: false,\n        migrated: false,\n        mongodbAvailable: false,\n        message:\n          \"MongoDB is not available. Currently running in localStorage mode.\",\n      });\n    }\n\n    const userId = \"kanu-portfolio\";\n\n    const profile = await Profile.findOne({ userId });\n    const projectsCount = await Project.countDocuments({ userId });\n    const contactsCount = await ContactMessage.countDocuments({ userId });\n    const gitSettings = await GitSettings.findOne({ userId });\n\n    res.json({\n      hasProfile: !!profile,\n      projectsCount,\n      contactsCount,\n      hasGitSettings: !!gitSettings,\n      migrated: !!(\n        profile ||\n        projectsCount > 0 ||\n        contactsCount > 0 ||\n        gitSettings\n      ),\n      mongodbAvailable: true,\n    });\n  } catch (error) {\n    console.error(\"Error checking migration status:\", error);\n    res.status(500).json({ error: \"Failed to check migration status\" });\n  }\n});\n\nexport default router;\n","import express from \"express\";\n\nconst router = express.Router();\n\n// Development-only email testing endpoint\nrouter.post(\"/send-email\", (req, res) => {\n  console.log(\"📧 Development email test received:\", req.body);\n\n  const { name, email, phone, subject, message, contactMethod } = req.body;\n\n  // Validate required fields\n  if (!name || !email || !message) {\n    return res.status(400).json({\n      error: \"Missing required fields\",\n      details: \"Name, email, and message are required\",\n    });\n  }\n\n  // Simulate email sending delay\n  setTimeout(() => {\n    console.log(`📨 Simulated email sent to kanuprajapati717@gmail.com`);\n    console.log(`📧 From: ${name} (${email})`);\n    console.log(`📝 Subject: ${subject || \"Contact Form Submission\"}`);\n    console.log(`💬 Message: ${message}`);\n    console.log(`📞 Contact Method: ${contactMethod}`);\n    console.log(`🎯 Phone: ${phone || \"Not provided\"}`);\n\n    res.status(200).json({\n      success: true,\n      message: \"Email sent successfully (development mode)\",\n      timestamp: new Date().toISOString(),\n      development: true,\n      details: {\n        recipient: \"kanuprajapati717@gmail.com\",\n        sender: email,\n        subject: subject || \"Contact Form Submission\",\n      },\n    });\n  }, 500); // Simulate network delay\n});\n\nexport default router;\n","import express from \"express\";\nimport { SMSNotification, SMSCategory } from \"../models/index.js\";\n\nconst router = express.Router();\n\n// Get all SMS notifications\nrouter.get(\"/notifications\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const notifications = await SMSNotification.find({ userId }).sort({\n      createdAt: -1,\n    });\n    res.json(notifications);\n  } catch (error) {\n    console.error(\"Error fetching SMS notifications:\", error);\n    res.status(500).json({ error: \"Failed to fetch SMS notifications\" });\n  }\n});\n\n// Create new SMS notification\nrouter.post(\"/notifications\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const notificationData = { ...req.body, userId };\n\n    const notification = new SMSNotification(notificationData);\n    await notification.save();\n\n    res.status(201).json(notification);\n  } catch (error) {\n    console.error(\"Error creating SMS notification:\", error);\n    res.status(500).json({ error: \"Failed to create SMS notification\" });\n  }\n});\n\n// Update SMS notification\nrouter.put(\"/notifications/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const updateData = req.body;\n\n    const notification = await SMSNotification.findByIdAndUpdate(\n      id,\n      updateData,\n      { new: true },\n    );\n\n    if (!notification) {\n      return res.status(404).json({ error: \"SMS notification not found\" });\n    }\n\n    res.json(notification);\n  } catch (error) {\n    console.error(\"Error updating SMS notification:\", error);\n    res.status(500).json({ error: \"Failed to update SMS notification\" });\n  }\n});\n\n// Delete SMS notification\nrouter.delete(\"/notifications/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const notification = await SMSNotification.findByIdAndDelete(id);\n\n    if (!notification) {\n      return res.status(404).json({ error: \"SMS notification not found\" });\n    }\n\n    res.json({ message: \"SMS notification deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error deleting SMS notification:\", error);\n    res.status(500).json({ error: \"Failed to delete SMS notification\" });\n  }\n});\n\n// Clear all SMS notifications\nrouter.delete(\"/notifications\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    await SMSNotification.deleteMany({ userId });\n    res.json({ message: \"All SMS notifications cleared successfully\" });\n  } catch (error) {\n    console.error(\"Error clearing SMS notifications:\", error);\n    res.status(500).json({ error: \"Failed to clear SMS notifications\" });\n  }\n});\n\n// Get SMS categories\nrouter.get(\"/categories\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    let categories = await SMSCategory.findOne({ userId });\n\n    if (!categories) {\n      // Create default categories if doesn't exist\n      categories = new SMSCategory({\n        userId,\n        categories: [\"Contact\", \"Inquiry\", \"Support\", \"Urgent\"],\n      });\n      await categories.save();\n    }\n\n    res.json(categories.categories);\n  } catch (error) {\n    console.error(\"Error fetching SMS categories:\", error);\n    res.status(500).json({ error: \"Failed to fetch SMS categories\" });\n  }\n});\n\n// Update SMS categories\nrouter.put(\"/categories\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const { categories } = req.body;\n\n    const result = await SMSCategory.findOneAndUpdate(\n      { userId },\n      { categories },\n      { new: true, upsert: true },\n    );\n\n    res.json(result.categories);\n  } catch (error) {\n    console.error(\"Error updating SMS categories:\", error);\n    res.status(500).json({ error: \"Failed to update SMS categories\" });\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport { UserSettings } from \"../models/index.js\";\n\nconst router = express.Router();\n\n// Get user settings\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    let settings = await UserSettings.findOne({ userId });\n\n    if (!settings) {\n      // Create default settings if doesn't exist\n      settings = new UserSettings({ userId });\n      await settings.save();\n    }\n\n    res.json(settings);\n  } catch (error) {\n    console.error(\"Error fetching user settings:\", error);\n    res.status(500).json({ error: \"Failed to fetch user settings\" });\n  }\n});\n\n// Update user settings\nrouter.put(\"/\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const updateData = req.body;\n\n    const settings = await UserSettings.findOneAndUpdate(\n      { userId },\n      updateData,\n      { new: true, upsert: true },\n    );\n\n    res.json(settings);\n  } catch (error) {\n    console.error(\"Error updating user settings:\", error);\n    res.status(500).json({ error: \"Failed to update user settings\" });\n  }\n});\n\n// Update notification settings specifically\nrouter.put(\"/notifications\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const { notificationSettings } = req.body;\n\n    const settings = await UserSettings.findOneAndUpdate(\n      { userId },\n      { notificationSettings },\n      { new: true, upsert: true },\n    );\n\n    res.json(settings);\n  } catch (error) {\n    console.error(\"Error updating notification settings:\", error);\n    res.status(500).json({ error: \"Failed to update notification settings\" });\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport { Activity, Skill } from \"../models/index.js\";\n\nconst router = express.Router();\n\n// ACTIVITIES ROUTES\n\n// Get all activities\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const activities = await Activity.find({ userId }).sort({ createdAt: -1 });\n    res.json(activities);\n  } catch (error) {\n    console.error(\"Error fetching activities:\", error);\n    res.status(500).json({ error: \"Failed to fetch activities\" });\n  }\n});\n\n// Create new activity\nrouter.post(\"/\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const activityData = { ...req.body, userId };\n\n    const activity = new Activity(activityData);\n    await activity.save();\n\n    res.status(201).json(activity);\n  } catch (error) {\n    console.error(\"Error creating activity:\", error);\n    res.status(500).json({ error: \"Failed to create activity\" });\n  }\n});\n\n// Update activity\nrouter.put(\"/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const updateData = req.body;\n\n    const activity = await Activity.findByIdAndUpdate(id, updateData, {\n      new: true,\n    });\n\n    if (!activity) {\n      return res.status(404).json({ error: \"Activity not found\" });\n    }\n\n    res.json(activity);\n  } catch (error) {\n    console.error(\"Error updating activity:\", error);\n    res.status(500).json({ error: \"Failed to update activity\" });\n  }\n});\n\n// Delete activity\nrouter.delete(\"/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const activity = await Activity.findByIdAndDelete(id);\n\n    if (!activity) {\n      return res.status(404).json({ error: \"Activity not found\" });\n    }\n\n    res.json({ message: \"Activity deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error deleting activity:\", error);\n    res.status(500).json({ error: \"Failed to delete activity\" });\n  }\n});\n\n// SKILLS ROUTES\n\n// Get all skills\nrouter.get(\"/skills\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const skills = await Skill.find({ userId }).sort({ category: 1, name: 1 });\n    res.json(skills);\n  } catch (error) {\n    console.error(\"Error fetching skills:\", error);\n    res.status(500).json({ error: \"Failed to fetch skills\" });\n  }\n});\n\n// Create new skill\nrouter.post(\"/skills\", async (req, res) => {\n  try {\n    const userId = \"kanu-portfolio\";\n    const skillData = { ...req.body, userId };\n\n    const skill = new Skill(skillData);\n    await skill.save();\n\n    res.status(201).json(skill);\n  } catch (error) {\n    console.error(\"Error creating skill:\", error);\n    res.status(500).json({ error: \"Failed to create skill\" });\n  }\n});\n\n// Update skill\nrouter.put(\"/skills/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const updateData = req.body;\n\n    const skill = await Skill.findByIdAndUpdate(id, updateData, { new: true });\n\n    if (!skill) {\n      return res.status(404).json({ error: \"Skill not found\" });\n    }\n\n    res.json(skill);\n  } catch (error) {\n    console.error(\"Error updating skill:\", error);\n    res.status(500).json({ error: \"Failed to update skill\" });\n  }\n});\n\n// Delete skill\nrouter.delete(\"/skills/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const skill = await Skill.findByIdAndDelete(id);\n\n    if (!skill) {\n      return res.status(404).json({ error: \"Skill not found\" });\n    }\n\n    res.json({ message: \"Skill deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error deleting skill:\", error);\n    res.status(500).json({ error: \"Failed to delete skill\" });\n  }\n});\n\nexport default router;\n","import { RequestHandler } from \"express\";\nimport { z } from \"zod\";\n\n// Validation schema for file upload\nconst uploadSchema = z.object({\n  type: z.enum(['profile-image', 'project-image', 'document']),\n  filename: z.string().optional(),\n});\n\nexport interface UploadResponse {\n  success: boolean;\n  url?: string;\n  filename?: string;\n  message?: string;\n  error?: string;\n}\n\n// Handle file upload for profile images and other assets\nexport const handleFileUpload: RequestHandler = async (req, res) => {\n  try {\n    const { type, filename } = uploadSchema.parse(req.body);\n    \n    // In a real application, you would:\n    // 1. Process the uploaded file\n    // 2. Validate file type and size\n    // 3. Store in cloud storage (AWS S3, Cloudinary, etc.)\n    // 4. Return the public URL\n    \n    // For demo purposes, we'll simulate the upload process\n    const response: UploadResponse = {\n      success: true,\n      url: `https://example.com/uploads/${Date.now()}-${filename || 'profile.jpg'}`,\n      filename: filename || 'profile.jpg',\n      message: 'File uploaded successfully'\n    };\n\n    res.json(response);\n  } catch (error) {\n    console.error('Upload error:', error);\n    \n    const errorResponse: UploadResponse = {\n      success: false,\n      error: error instanceof Error ? error.message : 'Upload failed'\n    };\n    \n    res.status(400).json(errorResponse);\n  }\n};\n\n// Handle file deletion\nexport const handleFileDelete: RequestHandler = async (req, res) => {\n  try {\n    const { filename } = req.params;\n    \n    if (!filename) {\n      return res.status(400).json({\n        success: false,\n        error: 'Filename is required'\n      });\n    }\n\n    // In a real application, you would delete the file from storage\n    \n    const response: UploadResponse = {\n      success: true,\n      message: 'File deleted successfully'\n    };\n\n    res.json(response);\n  } catch (error) {\n    console.error('Delete error:', error);\n    \n    const errorResponse: UploadResponse = {\n      success: false,\n      error: error instanceof Error ? error.message : 'Delete failed'\n    };\n    \n    res.status(500).json(errorResponse);\n  }\n};\n\n// Get upload configuration\nexport const getUploadConfig: RequestHandler = (req, res) => {\n  const config = {\n    maxFileSize: 5 * 1024 * 1024, // 5MB\n    allowedTypes: ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'],\n    uploadEndpoint: '/api/upload',\n    storageProvider: 'localStorage', // In production: 's3', 'cloudinary', etc.\n  };\n\n  res.json(config);\n};\n","import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo.js\";\nimport { connectDB, isMongoDBAvailable } from \"./database/connection.js\";\nimport profileRoutes from \"./routes/profile.js\";\nimport projectsRoutes from \"./routes/projects.js\";\nimport contactsRoutes from \"./routes/contacts.js\";\nimport gitRoutes from \"./routes/git.js\";\nimport migrateRoutes from \"./routes/migrate.js\";\nimport emailTestRoutes from \"./routes/email-test.js\";\nimport smsRoutes from \"./routes/sms.js\";\nimport settingsRoutes from \"./routes/settings.js\";\nimport activitiesRoutes from \"./routes/activities.js\";\nimport { handleFileUpload, handleFileDelete, getUploadConfig } from \"./routes/upload.js\";\n\nexport function createServer() {\n  const app = express();\n\n  // Try to connect to MongoDB (non-blocking)\n  connectDB()\n    .then((connected) => {\n      if (connected) {\n        console.log(\"✅ MongoDB integration enabled\");\n      } else {\n        console.log(\"📱 Running in localStorage mode\");\n      }\n    })\n    .catch((error) => {\n      console.warn(\"MongoDB connection attempt failed:\", error.message);\n    });\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json({ limit: \"10mb\" }));\n  app.use(express.urlencoded({ extended: true, limit: \"10mb\" }));\n\n  // Health check endpoint\n  app.get(\"/api/health\", (_req, res) => {\n    res.json({\n      status: \"ok\",\n      timestamp: new Date().toISOString(),\n      mongodb: isMongoDBAvailable() ? \"connected\" : \"disconnected\",\n    });\n  });\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\n    res.json({ message: ping });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n\n  // Portfolio API routes\n  app.use(\"/api/profile\", profileRoutes);\n  app.use(\"/api/projects\", projectsRoutes);\n  app.use(\"/api/contacts\", contactsRoutes);\n  app.use(\"/api/git\", gitRoutes);\n  app.use(\"/api/migrate\", migrateRoutes);\n  app.use(\"/api/sms\", smsRoutes);\n  app.use(\"/api/settings\", settingsRoutes);\n  app.use(\"/api/activities\", activitiesRoutes);\n  app.use(\"/api\", emailTestRoutes); // Development email testing\n\n  // File upload endpoints\n  app.post(\"/api/upload\", handleFileUpload);\n  app.delete(\"/api/upload/:filename\", handleFileDelete);\n  app.get(\"/api/upload/config\", getUploadConfig);\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`🚀 Fusion Starter server running on port ${port}`);\n  console.log(`📱 Frontend: http://localhost:${port}`);\n  console.log(`🔧 API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["router","express","app","profileRoutes","projectsRoutes","contactsRoutes","gitRoutes","migrateRoutes","smsRoutes","settingsRoutes","activitiesRoutes","emailTestRoutes"],"mappings":"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"}